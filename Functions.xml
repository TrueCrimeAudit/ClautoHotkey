<Method name="Abs(Num)" returnType="Number" description="; Returns the absolute value of the specified number.">
  <Parameters>
    <Required name="Num" type="Unknown" />
  </Parameters>
  <Method name="ACos(Num)" returnType="Number" description="; Returns the arccosine (the number whose cosine is the specified number) in radians.">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ASin(Num)" returnType="Number" description="; Returns the arcsine (the number whose sine is the specified number) in radians.">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ATan(Num)" returnType="Number" description="; Returns the arctangent (the number whose tangent is the specified number) in radians.">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="BlockInput(OnOff/SendMouse/MouseMove)" returnType="Empty" description="String                                                                                       ; Disables or enables the user's ability to interact with the computer via keyboard and mouse.">
    <Parameters>
      <Required name="OnOff/SendMouse/MouseMove" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="CallbackCreate(Function [, Options, ParamCount])" returnType="Integer" description="; Creates a machine-code address that when called, redirects the call to a function in the script.">
    <Parameters>
      <Required name="Function [" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="ParamCount]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="CallbackFree(Address)" returnType="EmptyString" description="; Deletes a callback and releases its reference to the function object.">
    <Parameters>
      <Required name="Address" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="CaretGetPos([&amp;OutX, &amp;OutY])" returnType="Integer" description="; Retrieves the current position of the caret (text insertion point).">
    <Parameters>
      <Required name="[&amp;OutX" type="Unknown" />
      <Required name="&amp;OutY]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Ceil(Num)" returnType="Number" description="; Returns the specified number rounded up to the nearest integer (without any .00 suffix).">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Chr(Num)" returnType="String" description="; Returns the string (usually a single character) corresponding to the character code indicated by the specified number.">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Click(options)" returnType="Integer" description="; Clicks a mouse button at the specified coordinates. It can also hold down a mouse button, turn the mouse wheel, or move the mouse.">
    <Parameters>
      <Required name="options" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ClipWait([Timeout, WaitFor])" returnType="Integer" description="; Waits until the clipboard contains data.">
    <Parameters>
      <Required name="[Timeout" type="Unknown" />
      <Required name="WaitFor]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComCall(Index, ComObj [, Type1, Arg1, TypeN, ArgN, ReturnType])" returnType="Primitive" description="; Calls a native COM interface method by index.">
    <Parameters>
      <Required name="Index" type="Unknown" />
      <Required name="ComObj [" type="Unknown" />
      <Required name="Type1" type="Unknown" />
      <Required name="Arg1" type="Unknown" />
      <Required name="TypeN" type="Unknown" />
      <Required name="ArgN" type="Unknown" />
      <Required name="ReturnType]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjActive(CLSID)" returnType="ComObject" description="; Retrieves a registered COM object.">
    <Parameters>
      <Required name="CLSID" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjConnect(ComObj [, PrefixOrSink])" returnType="Any" description="; Connects a COM object's event source to the script, enabling events to be handled.">
    <Parameters>
      <Required name="ComObj [" type="Unknown" />
      <Required name="PrefixOrSink]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjFlags(ComObj [, NewFlags, Mask])" returnType="Integer" description="; Retrieves or changes flags which control a COM wrapper object's behaviour.">
    <Parameters>
      <Required name="ComObj [" type="Unknown" />
      <Required name="NewFlags" type="Unknown" />
      <Required name="Mask]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjFromPtr(DispPtr)" returnType="ComObject" description="; Wraps a raw IDispatch pointer (COM object) for use by the script.">
    <Parameters>
      <Required name="DispPtr" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjGet(Name)" returnType="ComObject" description="; Returns a reference to an object provided by a COM component.">
    <Parameters>
      <Required name="Name" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjQuery(ComObj, IID)" returnType="ComObject" description="OR ComValue                                                                                           ; Queries a COM object for an interface. Return value type is based on IID.">
    <Parameters>
      <Required name="ComObj" type="Unknown" />
      <Required name="IID" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjQuery(ComObj, SID, IID)" returnType="ComObject" description="OR ComValue                                                                                      ; Queries a COM object for a service. Return value type is based on IID.">
    <Parameters>
      <Required name="ComObj" type="Unknown" />
      <Required name="SID" type="Unknown" />
      <Required name="IID" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjType(ComObj [, InfoType])" returnType="Primitive" description="; Retrieves type information from a COM object.">
    <Parameters>
      <Required name="ComObj [" type="Unknown" />
      <Required name="InfoType]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ComObjValue(ComObj)" returnType="Integer" description="; Retrieves the value or pointer stored in a COM wrapper object.">
    <Parameters>
      <Required name="ComObj" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlAddItem(String, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Adds the specified string as a new entry at the bottom of a ListBox or ComboBox.">
    <Parameters>
      <Required name="String" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlChooseIndex(N, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Sets the selection in a ListBox, ComboBox or Tab control to be the Nth item.">
    <Parameters>
      <Required name="N" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlChooseString(String, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Sets the selection in a ListBox or ComboBox to be the first entry whose leading part matches the specified string.">
    <Parameters>
      <Required name="String" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlClick([ControlOrPos, WinTitle, WinText, Button, ClickCount, Options, NotInTitle, NotInText])" returnType="EmptyString" description="; Sends a mouse button or mouse wheel event to a control.">
    <Parameters>
      <Required name="[ControlOrPos" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="Button" type="Unknown" />
      <Required name="ClickCount" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlDeleteItem(N, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Deletes the specified entry number from a ListBox or ComboBox.">
    <Parameters>
      <Required name="N" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlFindItem(String, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the entry number of a ListBox or ComboBox that is a complete match for the specified string.">
    <Parameters>
      <Required name="String" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlFocus(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Sets input focus to a given control on a window.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetChecked(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns a non-zero value if the checkbox or radio button is checked.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetChoice(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns the name of the currently selected entry in a ListBox or ComboBox.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetClassNN(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns the ClassNN (class name and sequence number) of the specified control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetEnabled(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns a non-zero value if the specified control is enabled.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetExStyle(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns an integer representing the style or extended style of the specified control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetFocus([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Retrieves which control of the target window has keyboard focus, if any.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetHwnd(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the unique ID number of the specified control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetIndex(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the index of the currently selected entry or tab in a ListBox, ComboBox or Tab control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetItems(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Array" description="; Returns an array of items/rows from a ListBox, ComboBox, or DropDownList.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetPos([&amp;OutX, &amp;OutY, &amp;OutWidth, &amp;OutHeight, Control, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Retrieves the position and size of a control.">
    <Parameters>
      <Required name="[&amp;OutX" type="Unknown" />
      <Required name="&amp;OutY" type="Unknown" />
      <Required name="&amp;OutWidth" type="Unknown" />
      <Required name="&amp;OutHeight" type="Unknown" />
      <Required name="Control" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetStyle(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns an integer representing the style or extended style of the specified control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetText(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Retrieves text from a control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlGetVisible(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns a non-zero value if the specified control is visible.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlHide(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Hides the specified control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlHideDropDown(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Hides the drop-down list of a ComboBox control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlMove([X, Y, Width, Height, Control, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Moves or resizes a control.">
    <Parameters>
      <Required name="[X" type="Unknown" />
      <Required name="Y" type="Unknown" />
      <Required name="Width" type="Unknown" />
      <Required name="Height" type="Unknown" />
      <Required name="Control" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlSend(Keys [, Control, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Sends simulated keystrokes to a window or control.">
    <Parameters>
      <Required name="Keys [" type="Unknown" />
      <Required name="Control" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlSendText(Keys [, Control, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Sends text to a window or control.">
    <Parameters>
      <Required name="Keys [" type="Unknown" />
      <Required name="Control" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlSetChecked(NewSetting, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Turns on (checks) or turns off (unchecks) a checkbox or radio button.">
    <Parameters>
      <Required name="NewSetting" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlSetEnabled(NewSetting, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Enables or disables the specified control.">
    <Parameters>
      <Required name="NewSetting" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlSetExStyle(Value, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the extended style of the specified control.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlSetStyle(Value, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the style of the specified control.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlSetText(NewText, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the text of a control.">
    <Parameters>
      <Required name="NewText" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlShow(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Shows the specified control if it was previously hidden.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ControlShowDropDown(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Shows the drop-down list of a ComboBox control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="CoordMode(TargetType [, RelativeTo])" returnType="String" description="; Sets coordinate mode for various built-in functions to be relative to either the active window or the screen.">
    <Parameters>
      <Required name="TargetType [" type="Unknown" />
      <Required name="RelativeTo]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Cos(num)" returnType="Number" description="; Returns the trigonometric cosine of the specified number.">
    <Parameters>
      <Required name="num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Critical(OnOffNumeric)" returnType="Integer" description="; Prevents the current thread from being interrupted by other threads, or enables it to be interrupted.">
    <Parameters>
      <Required name="OnOffNumeric" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DateAdd(DateTime, Time, TimeUnits)" returnType="String" description="; Adds or subtracts time from a date-time value.">
    <Parameters>
      <Required name="DateTime" type="Unknown" />
      <Required name="Time" type="Unknown" />
      <Required name="TimeUnits" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DateDiff(DateTime1, DateTime2, TimeUnits)" returnType="Integer" description="; Compares two date-time values and returns the difference.">
    <Parameters>
      <Required name="DateTime1" type="Unknown" />
      <Required name="DateTime2" type="Unknown" />
      <Required name="TimeUnits" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DetectHiddenText(Mode)" returnType="Integer" description="; Determines whether invisible text in a window is &quot;seen&quot; for the purpose of finding the window. This affects windowing functions such as WinExist and WinActivate.">
    <Parameters>
      <Required name="Mode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DetectHiddenWindows(Mode)" returnType="Integer" description="; Determines whether invisible windows are &quot;seen&quot; by the script.">
    <Parameters>
      <Required name="Mode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DirCopy(Source, Dest [, Overwrite])" returnType="EmptyString" description="; Copies a folder along with all its sub-folders and files (similar to xcopy).">
    <Parameters>
      <Required name="Source" type="Unknown" />
      <Required name="Dest [" type="Unknown" />
      <Required name="Overwrite]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DirCreate(DirName)" returnType="EmptyString" description="; Creates a folder.">
    <Parameters>
      <Required name="DirName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DirDelete(DirName [, Recurse])" returnType="EmptyString" description="; Deletes a folder.">
    <Parameters>
      <Required name="DirName [" type="Unknown" />
      <Required name="Recurse]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DirExist(FilePattern)" returnType="String" description="; Checks for the existence of a folder and returns its attributes.">
    <Parameters>
      <Required name="FilePattern" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DirMove(Source, Dest [, OverwriteOrRename])" returnType="EmptyString" description="; Moves a folder along with all its sub-folders and files. It can also rename a folder.">
    <Parameters>
      <Required name="Source" type="Unknown" />
      <Required name="Dest [" type="Unknown" />
      <Required name="OverwriteOrRename]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DirSelect([StartingFolder, Options, Prompt])" returnType="String" description="; Displays a standard dialog that allows the user to select a folder.">
    <Parameters>
      <Required name="[StartingFolder" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="Prompt]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DllCall(['DllNameOrPath\'] Function [, Type1, Arg1, TypeN, ArgM, CdeclReturnType])" returnType="Primitive" description="; Calls a function inside a DLL, such as a standard Windows API function.">
    <Parameters>
      <Required name="['DllNameOrPath\'] Function [" type="Unknown" />
      <Required name="Type1" type="Unknown" />
      <Required name="Arg1" type="Unknown" />
      <Required name="TypeN" type="Unknown" />
      <Required name="ArgM" type="Unknown" />
      <Required name="CdeclReturnType]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Download(URL, Filename)" returnType="EmptyString" description="; Downloads a file from the Internet.">
    <Parameters>
      <Required name="URL" type="Unknown" />
      <Required name="Filename" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveEject(Drive)" returnType="EmptyString" description="; Ejects the tray of the specified CD/DVD drive. DriveEject can also eject a removable drive like a USB stick.">
    <Parameters>
      <Required name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetCapacity(Path)" returnType="Integer" description="; Returns the total capacity of the drive which contains the specified path, in megabytes.">
    <Parameters>
      <Required name="Path" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetFileSystem(Drive)" returnType="String" description="; Returns the type of the specified drive's file system.">
    <Parameters>
      <Required name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetLabel(Drive)" returnType="String" description="; Returns the volume label of the specified drive.">
    <Parameters>
      <Required name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetList(DriveType)" returnType="String" description="; Returns a string of letters, one character for each drive letter in the system.">
    <Parameters>
      <Required name="DriveType" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetSerial(Drive)" returnType="Integer" description="; Returns the volume serial number of the specified drive.">
    <Parameters>
      <Required name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetSpaceFree(Path)" returnType="Integer" description="; Returns the free disk space of the drive which contains the specified path, in megabytes.">
    <Parameters>
      <Required name="Path" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetStatus(Path)" returnType="String" description="; Returns the status of the drive which contains the specified path.">
    <Parameters>
      <Required name="Path" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetStatusCD([Drive])" returnType="String" description="; Returns the media status of the specified CD/DVD drive.">
    <Parameters>
      <Optional name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveGetType(Path)" returnType="String" description="; Returns the type of the drive which contains the specified path.">
    <Parameters>
      <Required name="Path" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveLock(Drive)" returnType="EmptyString" description="; Prevents the eject feature of the specified drive from working.">
    <Parameters>
      <Required name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveRetract(Drive)" returnType="EmptyString" description="; Retracts the tray of the specified CD/DVD drive.">
    <Parameters>
      <Required name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveSetLabel(Drive [, NewLabel])" returnType="EmptyString" description="; Changes the volume label of the specified drive.">
    <Parameters>
      <Required name="Drive [" type="Unknown" />
      <Required name="NewLabel]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="DriveUnlock(Drive)" returnType="EmptyString" description="; Restores the eject feature of the specified drive.">
    <Parameters>
      <Required name="Drive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Edit()" returnType="EmptyString" description="; Opens the current script for editing in the default editor." />
  <Method name="EditGetCurrentCol(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the column number in an Edit control where the caret (text insertion point) resides.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="EditGetCurrentLine(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the line number in an Edit control where the caret (text insert point) resides.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="EditGetLine(N, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns the text of the specified line in an Edit control.">
    <Parameters>
      <Required name="N" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="EditGetLineCount(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the number of lines in an Edit control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="EditGetSelectedText(Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns the selected text in an Edit control.">
    <Parameters>
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="EditPaste(String, Control [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Pastes the specified string at the caret (text insertion point) in an Edit control.">
    <Parameters>
      <Required name="String" type="Unknown" />
      <Required name="Control [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="EnvGet(EnvVar)" returnType="String" description="; Retrieves the value of the specified environment variable.">
    <Parameters>
      <Required name="EnvVar" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="EnvSet(EnvVar [, Value])" returnType="EmptyString" description="; Writes a value to the specified environment variable.">
    <Parameters>
      <Required name="EnvVar [" type="Unknown" />
      <Required name="Value]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Exit(ExitCode)" returnType="Integer" description="; Exits the current thread.">
    <Parameters>
      <Required name="ExitCode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ExitApp(ExitCode)" returnType="Integer" description="; Terminates the script.">
    <Parameters>
      <Required name="ExitCode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Exp(Num)" returnType="Number" description="; Returns the result of raising e (which is approximately 2.71828182845905) to the Nth power.">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileAppend(Text [, Filename, Options])" returnType="EmptyString" description="; Writes text or binary data to the end of a file (first creating the file, if necessary).">
    <Parameters>
      <Required name="Text [" type="Unknown" />
      <Required name="Filename" type="Unknown" />
      <Required name="Options]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileCopy(SourcePattern, DestPattern [, Overwrite])" returnType="EmptyString" description="; Copies one or more files.">
    <Parameters>
      <Required name="SourcePattern" type="Unknown" />
      <Required name="DestPattern [" type="Unknown" />
      <Required name="Overwrite]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileCreateShortcut(Target, LinkFile [, WorkingDir, Args, Description, IconFile, ShortcutKey, IconNumber, RunState])" returnType="EmptyString" description="; Creates a shortcut (.lnk) file.">
    <Parameters>
      <Required name="Target" type="Unknown" />
      <Required name="LinkFile [" type="Unknown" />
      <Required name="WorkingDir" type="Unknown" />
      <Required name="Args" type="Unknown" />
      <Required name="Description" type="Unknown" />
      <Required name="IconFile" type="Unknown" />
      <Required name="ShortcutKey" type="Unknown" />
      <Required name="IconNumber" type="Unknown" />
      <Required name="RunState]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileDelete(FilePattern)" returnType="EmptyString" description="; Deletes one or more files.">
    <Parameters>
      <Required name="FilePattern" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileEncoding(Encoding)" returnType="String" description="; Sets the default encoding for FileRead, Loop Read, FileAppend, and FileOpen.">
    <Parameters>
      <Required name="Encoding" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileExist(FilePattern)" returnType="String" description="; Checks for the existence of a file or folder and returns its attributes.">
    <Parameters>
      <Required name="FilePattern" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileGetAttrib([Filename])" returnType="String" description="; Reports whether a file or folder is read-only, hidden, etc.">
    <Parameters>
      <Optional name="Filename" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileGetShortcut(LinkFile [, &amp;OutTarget, &amp;OutDir, &amp;OutArgs, &amp;OutDescription, &amp;OutIcon, &amp;OutIconNum, &amp;OutRunState])" returnType="EmptyString" description="; Retrieves information about a shortcut (.lnk) file, such as its target file.">
    <Parameters>
      <Required name="LinkFile [" type="Unknown" />
      <Required name="&amp;OutTarget" type="Unknown" />
      <Required name="&amp;OutDir" type="Unknown" />
      <Required name="&amp;OutArgs" type="Unknown" />
      <Required name="&amp;OutDescription" type="Unknown" />
      <Required name="&amp;OutIcon" type="Unknown" />
      <Required name="&amp;OutIconNum" type="Unknown" />
      <Required name="&amp;OutRunState]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileGetSize([Filename, Units])" returnType="Integer" description="; Retrieves the size of a file.">
    <Parameters>
      <Required name="[Filename" type="Unknown" />
      <Required name="Units]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileGetTime([Filename, WhichTime])" returnType="String" description="; Retrieves the datetime stamp of a file or folder.">
    <Parameters>
      <Required name="[Filename" type="Unknown" />
      <Required name="WhichTime]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileGetVersion([Filename])" returnType="String" description="; Retrieves the version of a file.">
    <Parameters>
      <Optional name="Filename" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileInstall(Source, Dest [, Overwrite])" returnType="EmptyString" description="; Includes the specified file inside the compiled version of the script.">
    <Parameters>
      <Required name="Source" type="Unknown" />
      <Required name="Dest [" type="Unknown" />
      <Required name="Overwrite]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileMove(SourcePattern, DestPattern [, Overwrite])" returnType="EmptyString" description="; Moves or renames one or more files.">
    <Parameters>
      <Required name="SourcePattern" type="Unknown" />
      <Required name="DestPattern [" type="Unknown" />
      <Required name="Overwrite]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileOpen(Filename, Flags [, Encoding])" returnType="File" description="; Opens a file to read specific content from it and/or to write new content into it.">
    <Parameters>
      <Required name="Filename" type="Unknown" />
      <Required name="Flags [" type="Unknown" />
      <Required name="Encoding]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileRead(Filename [, Options])" returnType="String" description="OR Buffer                                                                                          ; Retrieves the contents of a file.">
    <Parameters>
      <Required name="Filename [" type="Unknown" />
      <Required name="Options]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileRecycle(FilePattern)" returnType="EmptyString" description="; Sends a file or directory to the recycle bin if possible, or permanently deletes it.">
    <Parameters>
      <Required name="FilePattern" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileRecycleEmpty([DriveLetter])" returnType="EmptyString" description="; Empties the recycle bin.">
    <Parameters>
      <Optional name="DriveLetter" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileSelect([Options, RootDir\Filename, Title, Filter])" returnType="String" description="or Array                                                                   ; Displays a standard dialog that allows the user to open or save file(s).">
    <Parameters>
      <Required name="[Options" type="Unknown" />
      <Required name="RootDir\Filename" type="Unknown" />
      <Required name="Title" type="Unknown" />
      <Required name="Filter]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileSetAttrib(Attributes [, FilePattern, Mode])" returnType="EmptyString" description="; Changes the attributes of one or more files or folders. Wildcards are supported.">
    <Parameters>
      <Required name="Attributes [" type="Unknown" />
      <Required name="FilePattern" type="Unknown" />
      <Required name="Mode]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FileSetTime([YYYYMMDDHH24MISS, FilePattern, WhichTime, Mode])" returnType="EmptyString" description="; Changes the datetime stamp of one or more files or folders. Wildcards are supported.">
    <Parameters>
      <Required name="[YYYYMMDDHH24MISS" type="Unknown" />
      <Required name="FilePattern" type="Unknown" />
      <Required name="WhichTime" type="Unknown" />
      <Required name="Mode]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Floor(Num)" returnType="Integer" description="; Returns the specified number rounded down to the nearest integer (without any .00 suffix).">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Format(FormatStr [, Val1, ..., ValN])" returnType="String" description="; Formats a variable number of input values according to a format string.">
    <Parameters>
      <Required name="FormatStr [" type="Unknown" />
      <Required name="Val1" type="Unknown" />
      <Required name="..." type="Unknown" />
      <Required name="ValN]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="FormatTime([YYYYMMDDHH24MISS, Format])" returnType="String" description="; Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format.">
    <Parameters>
      <Required name="[YYYYMMDDHH24MISS" type="Unknown" />
      <Required name="Format]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GetKeyName(KeyName)" returnType="String" description="; Retrieves the name/text of a key.">
    <Parameters>
      <Required name="KeyName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GetKeySC(KeyName)" returnType="Integer" description="; Retrieves the scan code of a key.">
    <Parameters>
      <Required name="KeyName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GetKeyState(KeyName [, Mode])" returnType="Primitive" description="; Returns 1 (true) or 0 (false) depending on whether the specified keyboard key or mouse/controller button is down or up. Also retrieves controller status.">
    <Parameters>
      <Required name="KeyName [" type="Unknown" />
      <Required name="Mode]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GetKeyVK(KeyName)" returnType="Integer" description="; Retrieves the virtual key code of a key.">
    <Parameters>
      <Required name="KeyName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GetMethod(Value [, Name, ParamCount])" returnType="Func" description="; Retrieves the implementation function of a method.">
    <Parameters>
      <Required name="Value [" type="Unknown" />
      <Required name="Name" type="Unknown" />
      <Required name="ParamCount]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GroupActivate(GroupName [, Mode])" returnType="Integer" description="; Activates the next window in a window group that was defined with GroupAdd.">
    <Parameters>
      <Required name="GroupName [" type="Unknown" />
      <Required name="Mode]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GroupAdd(GroupName [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Adds a window specification to a window group, creating the group if necessary.">
    <Parameters>
      <Required name="GroupName [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GroupClose(GroupName [, Mode])" returnType="EmptyString" description="; Closes the active window if it was just activated by GroupActivate or GroupDeactivate. It then activates the next window in the series. It can also close all windows in a group.">
    <Parameters>
      <Required name="GroupName [" type="Unknown" />
      <Required name="Mode]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GroupDeactivate(GroupName [, Mode])" returnType="EmptyString" description="; Similar to GroupActivate except activates the next window not in the group.">
    <Parameters>
      <Required name="GroupName [" type="Unknown" />
      <Required name="Mode]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GuiCtrlFromHwnd(Hwnd)" returnType="Gui" description=".Control                                                                                                        ; Retrieves the GuiControl object of a GUI control associated with the specified window handle.">
    <Parameters>
      <Required name="Hwnd" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="GuiFromHwnd(Hwnd [, RecurseParent])" returnType="Gui" description="; Retrieves the Gui object of a GUI window associated with the specified window handle.">
    <Parameters>
      <Required name="Hwnd [" type="Unknown" />
      <Required name="RecurseParent]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HasBase(Value, BaseObj)" returnType="Integer" description="; Returns true if the specified base object is in the value's chain of base objects.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="BaseObj" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HasMethod(Value, Name, ParamCount)" returnType="Integer" description="; Returns true if the value has a method by this name.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="Name" type="Unknown" />
      <Required name="ParamCount" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HasProp(Value, Name)" returnType="Integer" description="; Returns true if the value has a property by this name.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="Name" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HotIf(ExpressionOrCallback)" returnType="EmptyString" description="; Specifies the criteria for subsequently created or modified hotkey variants and hotstring variants.">
    <Parameters>
      <Required name="ExpressionOrCallback" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HotIfWinActive(WinTitle, WinText)" returnType="EmptyString" description="; Specifies the criteria for subsequently created or modified hotkey variants and hotstring variants.">
    <Parameters>
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HotIfWinExist(WinTitle, WinText)" returnType="EmptyString" description="; Specifies the criteria for subsequently created or modified hotkey variants and hotstring variants.">
    <Parameters>
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HotIfWinNotActive(WinTitle, WinText)" returnType="EmptyString" description="; Specifies the criteria for subsequently created or modified hotkey variants and hotstring variants.">
    <Parameters>
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="HotIfWinNotExist(WinTitle, WinText)" returnType="EmptyString" description="; Specifies the criteria for subsequently created or modified hotkey variants and hotstring variants.">
    <Parameters>
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Hotkey(KeyName [, Action, Options])" returnType="EmptyString" description="; Creates, modifies, enables, or disables a hotkey while the script is running.">
    <Parameters>
      <Required name="KeyName [" type="Unknown" />
      <Required name="Action" type="Unknown" />
      <Required name="Options]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Hotstring(String [, Replacement, OnOffToggle])" returnType="EmptyString" description="; Creates, modifies, enables, or disables a hotstring while the script is running.">
    <Parameters>
      <Required name="String [" type="Unknown" />
      <Required name="Replacement" type="Unknown" />
      <Required name="OnOffToggle]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Hotstring(NewOptions)" returnType="EmptyString" description="; Creates, modifies, enables, or disables a hotstring while the script is running.">
    <Parameters>
      <Required name="NewOptions" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Hotstring(SubFunction [, Value])" returnType="EmptyString" description="; Creates, modifies, enables, or disables a hotstring while the script is running.">
    <Parameters>
      <Required name="SubFunction [" type="Unknown" />
      <Required name="Value]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IL_Add(ImageListID, IconFileName [, IconNumber])" returnType="Integer" description="; Adds an icon or picture to the specified ImageList.">
    <Parameters>
      <Required name="ImageListID" type="Unknown" />
      <Required name="IconFileName [" type="Unknown" />
      <Required name="IconNumber]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IL_Add(ImageListID, PicFileName, MaskColor, Resize)" returnType="Integer" description="; Adds an icon or picture to the specified ImageList.">
    <Parameters>
      <Required name="ImageListID" type="Unknown" />
      <Required name="PicFileName" type="Unknown" />
      <Required name="MaskColor" type="Unknown" />
      <Required name="Resize" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IL_Create([InitialCount, GrowCount, LargeIcons])" returnType="Integer" description="; Creates a new ImageList that is initially empty.">
    <Parameters>
      <Required name="[InitialCount" type="Unknown" />
      <Required name="GrowCount" type="Unknown" />
      <Required name="LargeIcons]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IL_Destroy(ImageListID)" returnType="Integer" description="; Deletes the specified ImageList.">
    <Parameters>
      <Required name="ImageListID" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ImageSearch(&amp;OutX, &amp;OutY, X1, Y1, X2, Y2, ImageFile)" returnType="Integer" description="; Searches a region of the screen for an image.">
    <Parameters>
      <Required name="&amp;OutX" type="Unknown" />
      <Required name="&amp;OutY" type="Unknown" />
      <Required name="X1" type="Unknown" />
      <Required name="Y1" type="Unknown" />
      <Required name="X2" type="Unknown" />
      <Required name="Y2" type="Unknown" />
      <Required name="ImageFile" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IniDelete(Filename, Section [, Key])" returnType="EmptyString" description="; Deletes a value from a standard format .ini file.">
    <Parameters>
      <Required name="Filename" type="Unknown" />
      <Required name="Section [" type="Unknown" />
      <Required name="Key]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IniRead(Filename, Section, Key [, Default])" returnType="String" description="; Reads a value from a standard format .ini file.">
    <Parameters>
      <Required name="Filename" type="Unknown" />
      <Required name="Section" type="Unknown" />
      <Required name="Key [" type="Unknown" />
      <Required name="Default]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IniRead(Filename, Section)" returnType="String" description="; Reads a section from a standard format .ini file.">
    <Parameters>
      <Required name="Filename" type="Unknown" />
      <Required name="Section" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IniRead(Filename)" returnType="String" description="; Reads a list of section names from a standard format .ini file.">
    <Parameters>
      <Required name="Filename" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IniWrite(Value, Filename, Section, Key)" returnType="EmptyString" description="; Writes a value or section to a standard format .ini file.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="Filename" type="Unknown" />
      <Required name="Section" type="Unknown" />
      <Required name="Key" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IniWrite(Value, Filename, Section)" returnType="EmptyString" description="; Writes a value or section to a standard format .ini file.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="Filename" type="Unknown" />
      <Required name="Section" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="InputBox([Prompt, Title, Options, Default])" returnType="Object" description="; Displays an input box to ask the user to enter a string.">
    <Parameters>
      <Required name="[Prompt" type="Unknown" />
      <Required name="Title" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="Default]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="InstallKeybdHook([Install, Force])" returnType="EmptyString" description="; Installs or uninstalls the keyboard hook.">
    <Parameters>
      <Required name="[Install" type="Unknown" />
      <Required name="Force]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="InstallMouseHook([Install, Force])" returnType="EmptyString" description="; Installs or uninstalls the mouse hook.">
    <Parameters>
      <Required name="[Install" type="Unknown" />
      <Required name="Force]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="InStr(Haystack, Needle [, CaseSense, StartingPos, Occurrence])" returnType="Integer" description="; Searches for a given occurrence of a string, from the left or the right.">
    <Parameters>
      <Required name="Haystack" type="Unknown" />
      <Required name="Needle [" type="Unknown" />
      <Required name="CaseSense" type="Unknown" />
      <Required name="StartingPos" type="Unknown" />
      <Required name="Occurrence]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IsLabel(LabelName)" returnType="Integer" description="; Returns a non-zero number if the specified label exists in the current scope.">
    <Parameters>
      <Required name="LabelName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IsObject(Value)" returnType="Integer" description="; Returns a non-zero number if the specified value is an object.">
    <Parameters>
      <Required name="Value" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IsSet(Var)" returnType="Integer" description="; Returns a non-zero number if the specified variable has been assigned a value.">
    <Parameters>
      <Required name="Var" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="IsSetRef(&amp;Ref)" returnType="Integer" description="; Returns a non-zero number if the specified var ref has been assigned a value.">
    <Parameters>
      <Required name="&amp;Ref" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="KeyHistory([MaxEvents])" returnType="EmptyString" description="; Displays script info and a history of the most recent keystrokes and mouse clicks.">
    <Parameters>
      <Optional name="MaxEvents" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="KeyWait(KeyName [, Options])" returnType="Integer" description="; Waits for a key or mouse/controller button to be released or pressed down.">
    <Parameters>
      <Required name="KeyName [" type="Unknown" />
      <Required name="Options]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ListHotkeys()" returnType="EmptyString" description="; Displays the hotkeys in use by the current script, whether their subroutines are currently running, and whether or not they use the keyboard or mouse hook." />
  <Method name="ListLines([Mode])" returnType="Integer" description="; Enables or disables line logging or displays the script lines most recently executed.">
    <Parameters>
      <Optional name="Mode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ListVars()" returnType="EmptyString" description="; Displays the script's variables: their names and current contents." />
  <Method name="ListViewGetContent([Options, Control, WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns a list of items/rows from a ListView.">
    <Parameters>
      <Required name="[Options" type="Unknown" />
      <Required name="Control" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Ln(Num)" returnType="Number" description="; Returns the natural logarithm (base e) of the specified number.">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="LoadPicture(Filename [, Options, &amp;OutImageType])" returnType="Integer" description="; Loads a picture from file and returns a bitmap or icon handle.">
    <Parameters>
      <Required name="Filename [" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="&amp;OutImageType]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Log(Num)" returnType="Number" description="; Returns the logarithm (base 10) of the specified number.">
    <Parameters>
      <Required name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="LTrim(String [, OmitChars])" returnType="String" description="; Trims characters from the beginning and/or end of a string.">
    <Parameters>
      <Required name="String [" type="Unknown" />
      <Required name="OmitChars]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Max(Number1 [, Number2, ..., NumberN])" returnType="Number" description="; Returns the highest number from a set of numbers.">
    <Parameters>
      <Required name="Number1 [" type="Unknown" />
      <Required name="Number2" type="Unknown" />
      <Required name="..." type="Unknown" />
      <Required name="NumberN]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MenuFromHandle(Handle)" returnType="Menu" description="OR MenuBar                                                                                                   ; Retrieves the Menu or MenuBar object corresponding to a Win32 menu handle.">
    <Parameters>
      <Required name="Handle" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MenuSelect(WinTitle, WinText, Menu [, SubMenu1, SubMenu2, SubMenu3, SubMenu4, SubMenu5, SubMenu6, NotInTitle, NotInText])" returnType="EmptyString" description="; Invokes a menu item from the menu bar of the specified window.">
    <Parameters>
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="Menu [" type="Unknown" />
      <Required name="SubMenu1" type="Unknown" />
      <Required name="SubMenu2" type="Unknown" />
      <Required name="SubMenu3" type="Unknown" />
      <Required name="SubMenu4" type="Unknown" />
      <Required name="SubMenu5" type="Unknown" />
      <Required name="SubMenu6" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Min(Number1 [, Number2, ..., NumberN])" returnType="Number" description="; Returns the lowest number from a set of numbers.">
    <Parameters>
      <Required name="Number1 [" type="Unknown" />
      <Required name="Number2" type="Unknown" />
      <Required name="..." type="Unknown" />
      <Required name="NumberN]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Mod(Dividend, Divisor)" returnType="Number" description="; Modulo. Returns the remainder of a number (dividend) divided by another number (divisor).">
    <Parameters>
      <Required name="Dividend" type="Unknown" />
      <Required name="Divisor" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MonitorGet([N, &amp;Left, &amp;Top, &amp;Right, &amp;Bottom])" returnType="Integer" description="; Checks if the specified monitor exists and optionally retrieves its bounding coordinates.">
    <Parameters>
      <Required name="[N" type="Unknown" />
      <Required name="&amp;Left" type="Unknown" />
      <Required name="&amp;Top" type="Unknown" />
      <Required name="&amp;Right" type="Unknown" />
      <Required name="&amp;Bottom]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MonitorGetCount()" returnType="Integer" description="; Returns the total number of monitors." />
  <Method name="MonitorGetName([Num])" returnType="String" description="; Returns the operating system's name of the specified monitor.">
    <Parameters>
      <Optional name="Num" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MonitorGetPrimary()" returnType="Integer" description="; Returns the number of the primary monitor." />
  <Method name="MonitorGetWorkArea([N, &amp;Left, &amp;Top, &amp;Right, &amp;Bottom])" returnType="Integer" description="; Checks if the specified monitor exists and optionally retrieves the bounding coordinates of its working area.">
    <Parameters>
      <Required name="[N" type="Unknown" />
      <Required name="&amp;Left" type="Unknown" />
      <Required name="&amp;Top" type="Unknown" />
      <Required name="&amp;Right" type="Unknown" />
      <Required name="&amp;Bottom]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MouseClick([WhichButton, X, Y, ClickCount, Speed, DownOrUp, Relative])" returnType="EmptyString" description="; Clicks or holds down a mouse button, or turns the mouse wheel. Note: The Click function is generally more flexible and easier to use.">
    <Parameters>
      <Required name="[WhichButton" type="Unknown" />
      <Required name="X" type="Unknown" />
      <Required name="Y" type="Unknown" />
      <Required name="ClickCount" type="Unknown" />
      <Required name="Speed" type="Unknown" />
      <Required name="DownOrUp" type="Unknown" />
      <Required name="Relative]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MouseClickDrag([WhichButton], X1, Y1, X2, Y2 [, Speed, Relative])" returnType="EmptyString" description="; Clicks and holds the specified mouse button at x1 y1, drags to x2 y2, and releases button.">
    <Parameters>
      <Optional name="WhichButton" type="Unknown" />
      <Required name="X1" type="Unknown" />
      <Required name="Y1" type="Unknown" />
      <Required name="X2" type="Unknown" />
      <Required name="Y2 [" type="Unknown" />
      <Required name="Speed" type="Unknown" />
      <Required name="Relative]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MouseClickDrag([WhichButton], , , X2, Y2 [, Speed, Relative])" returnType="EmptyString" description="; Clicks and holds the specified mouse button at the current x y coordinate, drags to x2 y2, and releases button.">
    <Parameters>
      <Optional name="WhichButton" type="Unknown" />
      <Required name="X2" type="Unknown" />
      <Required name="Y2 [" type="Unknown" />
      <Required name="Speed" type="Unknown" />
      <Required name="Relative]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MouseGetPos(OutX, &amp;OutY, &amp;OutWin, &amp;OutControl, Flag)" returnType="EmptyString" description="; Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over.">
    <Parameters>
      <Required name="OutX" type="Unknown" />
      <Required name="&amp;OutY" type="Unknown" />
      <Required name="&amp;OutWin" type="Unknown" />
      <Required name="&amp;OutControl" type="Unknown" />
      <Required name="Flag" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MouseMove(X, Y [, Speed, Relative])" returnType="EmptyString" description="; Moves the mouse cursor.">
    <Parameters>
      <Required name="X" type="Unknown" />
      <Required name="Y [" type="Unknown" />
      <Required name="Speed" type="Unknown" />
      <Required name="Relative]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="MsgBox([Text, Title, Options])" returnType="String" description="; Displays the specified text in a small window containing one or more buttons (such as Yes and No).">
    <Parameters>
      <Required name="[Text" type="Unknown" />
      <Required name="Title" type="Unknown" />
      <Required name="Options]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="NumGet(Source, Offset, Type)" returnType="Number" description="; Returns the binary number stored at the specified address+offset.">
    <Parameters>
      <Required name="Source" type="Unknown" />
      <Required name="Offset" type="Unknown" />
      <Required name="Type" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="NumGet(Source, Type)" returnType="Number" description="; Returns the binary number stored at the specified address+offset.">
    <Parameters>
      <Required name="Source" type="Unknown" />
      <Required name="Type" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="NumPut(Type1, Number1 [, ..., TypeN, NumberN,] Target [, Offset])" returnType="Integer" description="; Stores one or more numbers in binary format at the specified address+offset.">
    <Parameters>
      <Required name="Type1" type="Unknown" />
      <Required name="Number1 [" type="Unknown" />
      <Required name="..." type="Unknown" />
      <Required name="TypeN" type="Unknown" />
      <Required name="NumberN" type="Unknown" />
      <Required name="] Target [" type="Unknown" />
      <Required name="Offset]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjAddRef(Ptr)" returnType="Integer" description="; Increments an object's reference count.">
    <Parameters>
      <Required name="Ptr" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjBindMethod(Obj [, Method, Params])" returnType="BoundFunc" description="; Creates a BoundFunc object which calls a method of a given object.">
    <Parameters>
      <Required name="Obj [" type="Unknown" />
      <Required name="Method" type="Unknown" />
      <Required name="Params]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjGetBase(Value)" returnType="Prototype" description="; Returns the value's base object.">
    <Parameters>
      <Required name="Value" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjGetCapacity(Obj)" returnType="Integer" description="; ObjSetCapacity: Retrieve or set an Object's capacity to contain properties.">
    <Parameters>
      <Required name="Obj" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjHasOwnProp(Obj, Name)" returnType="Integer" description="; Returns 1 (true) if an object owns a property by the specified name.">
    <Parameters>
      <Required name="Obj" type="Unknown" />
      <Required name="Name" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjOwnPropCount(Obj)" returnType="Integer" description="; Retrieve the number of own properties contained by an object.">
    <Parameters>
      <Required name="Obj" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjOwnProps(obj)" returnType="Enumerator" description="; Enumerates an object's own properties.">
    <Parameters>
      <Required name="obj" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjRelease(Ptr)" returnType="Integer" description="; Decrements an object's reference count.">
    <Parameters>
      <Required name="Ptr" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjSetBase(Obj, BaseObj)" returnType="EmptyString" description="; Set an object's base object.">
    <Parameters>
      <Required name="Obj" type="Unknown" />
      <Required name="BaseObj" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ObjSetCapacity(Obj, MaxProps)" returnType="Integer" description="; Retrieve or set an Object's capacity to contain properties.">
    <Parameters>
      <Required name="Obj" type="Unknown" />
      <Required name="MaxProps" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="OnClipboardChange(Callback [, AddRemove])" returnType="EmptyString" description="; Registers a function to be called automatically whenever the clipboard's content changes.">
    <Parameters>
      <Required name="Callback [" type="Unknown" />
      <Required name="AddRemove]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="OnError(Callback [, AddRemove])" returnType="EmptyString" description="; Registers a function to be called automatically whenever an unhandled error occurs.">
    <Parameters>
      <Required name="Callback [" type="Unknown" />
      <Required name="AddRemove]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="OnExit(Callback [, AddRemove])" returnType="EmptyString" description="; Registers a function to be called automatically whenever the script exits.">
    <Parameters>
      <Required name="Callback [" type="Unknown" />
      <Required name="AddRemove]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="OnMessage(MsgNumber, Callback [, MaxThreads])" returnType="Integer" description="; Registers a function to be called automatically whenever the script receives the specified message.">
    <Parameters>
      <Required name="MsgNumber" type="Unknown" />
      <Required name="Callback [" type="Unknown" />
      <Required name="MaxThreads]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Ord(String)" returnType="Integer" description="; Returns the ordinal value (numeric character code) of the first character in the specified string.">
    <Parameters>
      <Required name="String" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="OutputDebug(Text)" returnType="EmptyString" description="; Sends a string to the debugger (if any) for display.">
    <Parameters>
      <Required name="Text" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Pause([NewState])" returnType="EmptyString" description="; Pauses the script's current thread.">
    <Parameters>
      <Optional name="NewState" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Persistent(Persist)" returnType="Integer" description="; Prevents the script from exiting automatically when its last thread completes, allowing it to stay running in an idle state.">
    <Parameters>
      <Required name="Persist" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="PixelGetColor(X, Y [, Mode])" returnType="String" description="; Retrieves the color of the pixel at the specified X and Y coordinates.">
    <Parameters>
      <Required name="X" type="Unknown" />
      <Required name="Y [" type="Unknown" />
      <Required name="Mode]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="PixelSearch(&amp;OutX, &amp;OutY, X1, Y1, X2, Y2, ColorID [, Variation])" returnType="Integer" description="; Searches a region of the screen for a pixel of the specified color.">
    <Parameters>
      <Required name="&amp;OutX" type="Unknown" />
      <Required name="&amp;OutY" type="Unknown" />
      <Required name="X1" type="Unknown" />
      <Required name="Y1" type="Unknown" />
      <Required name="X2" type="Unknown" />
      <Required name="Y2" type="Unknown" />
      <Required name="ColorID [" type="Unknown" />
      <Required name="Variation]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="PostMessage(MsgNumber [, wParam, lParam, Control, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Places a message in the message queue of a window or control.">
    <Parameters>
      <Required name="MsgNumber [" type="Unknown" />
      <Required name="wParam" type="Unknown" />
      <Required name="lParam" type="Unknown" />
      <Required name="Control" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessClose(PIDOrName)" returnType="Integer" description="; Forces the first11 matching process to close.">
    <Parameters>
      <Required name="PIDOrName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessExist([PIDOrName])" returnType="Integer" description="; Checks if the specified process exists.">
    <Parameters>
      <Optional name="PIDOrName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessGetName([PIDOrName])" returnType="String" description="; Returns the name of the specified process.">
    <Parameters>
      <Optional name="PIDOrName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessGetParent([PIDOrName])" returnType="Integer" description="; Returns the process ID (PID) of the process which created the specified process.">
    <Parameters>
      <Optional name="PIDOrName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessGetPath([PIDOrName])" returnType="String" description="; Returns the path of the specified process.">
    <Parameters>
      <Optional name="PIDOrName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessSetPriority(Level [, PIDOrName])" returnType="Integer" description="; Changes the priority level of the first matching process.">
    <Parameters>
      <Required name="Level [" type="Unknown" />
      <Required name="PIDOrName]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessWait(PIDOrName [, Timeout])" returnType="Integer" description="; Waits for the specified process to exist.">
    <Parameters>
      <Required name="PIDOrName [" type="Unknown" />
      <Required name="Timeout]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ProcessWaitClose(PIDOrName [, Timeout])" returnType="Integer" description="; Waits for all matching processes to close.">
    <Parameters>
      <Required name="PIDOrName [" type="Unknown" />
      <Required name="Timeout]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Random(NumLow, NumHigh)" returnType="Number" description="; Generates a pseudo-random number.">
    <Parameters>
      <Required name="NumLow" type="Unknown" />
      <Required name="NumHigh" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegCreateKey([KeyName])" returnType="EmptyString" description="; Creates a registry key without writing a value.">
    <Parameters>
      <Optional name="KeyName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegDelete([KeyName, ValueName])" returnType="EmptyString" description="; Deletes a value from the registry.">
    <Parameters>
      <Required name="[KeyName" type="Unknown" />
      <Required name="ValueName]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegDeleteKey([KeyName])" returnType="EmptyString" description="; Deletes a subkey from the registry.">
    <Parameters>
      <Optional name="KeyName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegExMatch(Haystack, NeedleRegEx [, &amp;Out, StartingPos])" returnType="Integer" description="; Determines whether a string contains a pattern (regular expression).">
    <Parameters>
      <Required name="Haystack" type="Unknown" />
      <Required name="NeedleRegEx [" type="Unknown" />
      <Required name="&amp;Out" type="Unknown" />
      <Required name="StartingPos]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegExReplace(Haystack, NeedleRegEx [, Replacement, &amp;OutCount, Limit, StartingPos])" returnType="String" description="; Replaces occurrences of a pattern (regular expression) inside a string.">
    <Parameters>
      <Required name="Haystack" type="Unknown" />
      <Required name="NeedleRegEx [" type="Unknown" />
      <Required name="Replacement" type="Unknown" />
      <Required name="&amp;OutCount" type="Unknown" />
      <Required name="Limit" type="Unknown" />
      <Required name="StartingPos]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegRead([KeyName, ValueName, Default])" returnType="String" description="OR Integer                                                                                 ; Reads a value from the registry.">
    <Parameters>
      <Required name="[KeyName" type="Unknown" />
      <Required name="ValueName" type="Unknown" />
      <Required name="Default]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegWrite(Value, ValueType, KeyName [, ValueName])" returnType="EmptyString" description="; Writes a value to the registry.">
    <Parameters>
      <Required name="Value" type="Unknown" />
      <Required name="ValueType" type="Unknown" />
      <Required name="KeyName [" type="Unknown" />
      <Required name="ValueName]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RegWrite(Value [, ValueType, , ValueName])" returnType="EmptyString" description="; Writes a value to the registry default.">
    <Parameters>
      <Required name="Value [" type="Unknown" />
      <Required name="ValueType" type="Unknown" />
      <Required name="ValueName]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Reload()" returnType="EmptyString" description="; Replaces the currently running instance of the script with a new one." />
  <Method name="Round(Num [, Precision])" returnType="Number" description="; Returns the specified number rounded to N decimal places.">
    <Parameters>
      <Required name="Num [" type="Unknown" />
      <Required name="Precision]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RTrim(String [, OmitChars])" returnType="String" description="; Trims characters from the beginning and/or end of a string.">
    <Parameters>
      <Required name="String [" type="Unknown" />
      <Required name="OmitChars]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Run(Target [, WorkingDir, Options, &amp;OutPID])" returnType="Integer" description="; Runs an external program.">
    <Parameters>
      <Required name="Target [" type="Unknown" />
      <Required name="WorkingDir" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="&amp;OutPID]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RunAs([User, Password, Domain])" returnType="EmptyString" description="; Specifies a set of user credentials to use for all subsequent Run and RunWait functions.">
    <Parameters>
      <Required name="[User" type="Unknown" />
      <Required name="Password" type="Unknown" />
      <Required name="Domain]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="RunWait(Target [, WorkingDir, Options, &amp;OutPID])" returnType="Integer" description="; Runs an external program and waits until it finishes.">
    <Parameters>
      <Required name="Target [" type="Unknown" />
      <Required name="WorkingDir" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="&amp;OutPID]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Send(Keys)" returnType="EmptyString" description="; Sends simulated keystrokes and mouse clicks to the active window.">
    <Parameters>
      <Required name="Keys" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SendEvent(Keys)" returnType="EmptyString" description="; Sends simulated keystrokes and mouse clicks to the active window.">
    <Parameters>
      <Required name="Keys" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SendInput(Keys)" returnType="EmptyString" description="; Sends simulated keystrokes and mouse clicks to the active window.">
    <Parameters>
      <Required name="Keys" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SendLevel(Level)" returnType="Integer" description="; Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.">
    <Parameters>
      <Required name="Level" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SendMessage(MsgNumber [, wParam, lParam, Control, WinTitle, WinText, NotInTitle, NotInText, Timeout])" returnType="Integer" description="; Sends a message to a window or control and waits for acknowledgement.">
    <Parameters>
      <Required name="MsgNumber [" type="Unknown" />
      <Required name="wParam" type="Unknown" />
      <Required name="lParam" type="Unknown" />
      <Required name="Control" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText" type="Unknown" />
      <Required name="Timeout]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SendMode(Mode)" returnType="String" description="; Makes Send synonymous with SendEvent or SendPlay rather than the default (SendInput). Also makes Click and MouseMove/Click/Drag use the specified method.">
    <Parameters>
      <Required name="Mode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SendPlay(Keys)" returnType="EmptyString" description="; Sends simulated keystrokes and mouse clicks to the active window.">
    <Parameters>
      <Required name="Keys" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SendText(Keys)" returnType="EmptyString" description="; Sends simulated keystrokes and mouse clicks to the active window.">
    <Parameters>
      <Required name="Keys" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetCapsLockState([State])" returnType="EmptyString" description="; Sets the state of CapsLock. Can also force the key to stay on or off.">
    <Parameters>
      <Optional name="State" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetControlDelay(Delay)" returnType="Integer" description="; Sets the delay that will occur after each control-modifying function.">
    <Parameters>
      <Required name="Delay" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetDefaultMouseSpeed(Speed)" returnType="Integer" description="; Sets the mouse speed that will be used if unspecified in Click, MouseMove, MouseClick, and MouseClickDrag.">
    <Parameters>
      <Required name="Speed" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetKeyDelay([Delay, PressDuration, Play])" returnType="EmptyString" description="; Sets the delay that will occur after each keystroke sent by Send or ControlSend.">
    <Parameters>
      <Required name="[Delay" type="Unknown" />
      <Required name="PressDuration" type="Unknown" />
      <Required name="Play]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetMouseDelay(Delay [, Play])" returnType="Integer" description="; Sets the delay that will occur after each mouse movement or click.">
    <Parameters>
      <Required name="Delay [" type="Unknown" />
      <Required name="Play]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetNumLockState([State])" returnType="EmptyString" description="; Sets the state of NumLock. Can also force the key to stay on or off.">
    <Parameters>
      <Optional name="State" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetRegView(RegView)" returnType="String" description="; Sets the registry view used by RegRead, RegWrite, RegDelete, RegDeleteKey and Loop Reg, allowing them in a 32-bit script to access the 64-bit registry view and vice versa.">
    <Parameters>
      <Required name="RegView" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetScrollLockState([State])" returnType="EmptyString" description="; Sets the state of ScrollLock. Can also force the key to stay on or off.">
    <Parameters>
      <Optional name="State" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetStoreCapsLockMode(Mode)" returnType="Integer" description="; Whether to restore the state of CapsLock after a Send.">
    <Parameters>
      <Required name="Mode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetTimer([Function, Period, Priority])" returnType="EmptyString" description="; Causes a function to be called automatically and repeatedly at a specified time interval.">
    <Parameters>
      <Required name="[Function" type="Unknown" />
      <Required name="Period" type="Unknown" />
      <Required name="Priority]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetTitleMatchMode(MatchMode)" returnType="Integer" description="OR String                                                                                           ; Sets the matching behavior of the WinTitle parameter in built-in functions such as WinWait.">
    <Parameters>
      <Required name="MatchMode" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetTitleMatchMode(Speed)" returnType="Integer" description="OR String                                                                                               ; Sets the matching behavior of the WinTitle parameter in built-in functions such as WinWait.">
    <Parameters>
      <Required name="Speed" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetWinDelay(Delay)" returnType="Integer" description="; Sets the delay that will occur after each windowing function, such as WinActivate.">
    <Parameters>
      <Required name="Delay" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SetWorkingDir(DirName)" returnType="EmptyString" description="; Changes the script's current working directory.">
    <Parameters>
      <Required name="DirName" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Shutdown(Flag)" returnType="EmptyString" description="; Shuts down, restarts, or logs off the system.">
    <Parameters>
      <Required name="Flag" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Sin(Number)" returnType="Number" description="; Returns the trigonometric sine of the specified number.">
    <Parameters>
      <Required name="Number" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Sleep(Delay)" returnType="EmptyString" description="; Waits the specified amount of time before continuing.">
    <Parameters>
      <Required name="Delay" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Sort(String [, Options, Callback])" returnType="String" description="; Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).">
    <Parameters>
      <Required name="String [" type="Unknown" />
      <Required name="Options" type="Unknown" />
      <Required name="Callback]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundBeep([Frequency, Duration])" returnType="EmptyString" description="; Emits a tone from the PC speaker.">
    <Parameters>
      <Required name="[Frequency" type="Unknown" />
      <Required name="Duration]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundGetInterface(IID [, Component, Device])" returnType="Integer" description="; Retrieves a native COM interface of a sound device or component.">
    <Parameters>
      <Required name="IID [" type="Unknown" />
      <Required name="Component" type="Unknown" />
      <Required name="Device]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundGetMute([Component, Device])" returnType="Integer" description="; Retrieves a mute setting of a sound device.">
    <Parameters>
      <Required name="[Component" type="Unknown" />
      <Required name="Device]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundGetName([Component, Device])" returnType="String" description="; Retrieves the name of a sound device or component.">
    <Parameters>
      <Required name="[Component" type="Unknown" />
      <Required name="Device]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundGetVolume([Component, Device])" returnType="Float" description="; Retrieves a volume setting of a sound device.">
    <Parameters>
      <Required name="[Component" type="Unknown" />
      <Required name="Device]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundPlay(Filename [, Wait])" returnType="EmptyString" description="; Plays a sound, video, or other supported file type.">
    <Parameters>
      <Required name="Filename [" type="Unknown" />
      <Required name="Wait]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundSetMute(NewSetting [, Component, Device])" returnType="EmptyString" description="; Changes a mute setting of a sound device.">
    <Parameters>
      <Required name="NewSetting [" type="Unknown" />
      <Required name="Component" type="Unknown" />
      <Required name="Device]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SoundSetVolume(NewSetting [, Component, Device])" returnType="EmptyString" description="; Changes a volume setting of a sound device.">
    <Parameters>
      <Required name="NewSetting [" type="Unknown" />
      <Required name="Component" type="Unknown" />
      <Required name="Device]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SplitPath(Path , &amp;OutFileName, &amp;OutDir, &amp;OutExtension, &amp;OutNameNoExt, &amp;OutDrive)" returnType="EmptyString" description="; Separates a file name or URL into its name, directory, extension, and drive.">
    <Parameters>
      <Required name="Path" type="Unknown" />
      <Required name="&amp;OutFileName" type="Unknown" />
      <Required name="&amp;OutDir" type="Unknown" />
      <Required name="&amp;OutExtension" type="Unknown" />
      <Required name="&amp;OutNameNoExt" type="Unknown" />
      <Required name="&amp;OutDrive" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Sqrt(Number)" returnType="Number" description="; Returns the square root of the specified number.">
    <Parameters>
      <Required name="Number" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StatusBarGetText([SectionNum, WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Retrieves the text from a standard status bar control.">
    <Parameters>
      <Required name="[SectionNum" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StatusBarWait([BarText, Timeout, SectionNum, WinTitle, WinText, Interval, NotInTitle, NotInText])" returnType="Integer" description="; Waits until a window's status bar contains the specified string.">
    <Parameters>
      <Required name="[BarText" type="Unknown" />
      <Required name="Timeout" type="Unknown" />
      <Required name="SectionNum" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="Interval" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrCompare(String1, String2 [, CaseSense])" returnType="Integer" description="; Compares two strings alphabetically.">
    <Parameters>
      <Required name="String1" type="Unknown" />
      <Required name="String2 [" type="Unknown" />
      <Required name="CaseSense]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrGet(Source [, Length, Encoding])" returnType="String" description="; Copies a string from a memory address or buffer, optionally converting it from a given code page.">
    <Parameters>
      <Required name="Source [" type="Unknown" />
      <Required name="Length" type="Unknown" />
      <Required name="Encoding]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrGet(Source [, Encoding])" returnType="String" description="; Copies a string from a memory address or buffer, optionally converting it from a given code page.">
    <Parameters>
      <Required name="Source [" type="Unknown" />
      <Required name="Encoding]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrLen(String)" returnType="Integer" description="; Retrieves the count of how many characters are in a string.">
    <Parameters>
      <Required name="String" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrLower(String)" returnType="String" description="; Converts a string to lowercase.">
    <Parameters>
      <Required name="String" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrPtr(Value)" returnType="Integer" description="; Returns the current memory address of a string.">
    <Parameters>
      <Required name="Value" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrPut(String, Target [, Length, Encoding])" returnType="Integer" description="; Copies a string to a memory address or buffer, optionally converting it to a given code page.">
    <Parameters>
      <Required name="String" type="Unknown" />
      <Required name="Target [" type="Unknown" />
      <Required name="Length" type="Unknown" />
      <Required name="Encoding]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrPut(String, Target [, Encoding])" returnType="Integer" description="; Copies a string to a memory address or buffer, optionally converting it to a given code page.">
    <Parameters>
      <Required name="String" type="Unknown" />
      <Required name="Target [" type="Unknown" />
      <Required name="Encoding]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrPut(String [, Encoding])" returnType="Integer" description="; Copies a string to a memory address or buffer, optionally converting it to a given code page.">
    <Parameters>
      <Required name="String [" type="Unknown" />
      <Required name="Encoding]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrReplace(Haystack, Needle [, ReplaceText, CaseSense, &amp;OutCount, Limit])" returnType="String" description="; Replaces the specified substring with a new string.">
    <Parameters>
      <Required name="Haystack" type="Unknown" />
      <Required name="Needle [" type="Unknown" />
      <Required name="ReplaceText" type="Unknown" />
      <Required name="CaseSense" type="Unknown" />
      <Required name="&amp;OutCount" type="Unknown" />
      <Required name="Limit]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrSplit(String [, Delimiters, OmitChars, MaxParts])" returnType="Array" description="; Separates a string into an array of substrings using the specified delimiters.">
    <Parameters>
      <Required name="String [" type="Unknown" />
      <Required name="Delimiters" type="Unknown" />
      <Required name="OmitChars" type="Unknown" />
      <Required name="MaxParts]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrTitle(String)" returnType="String" description="; Converts a string to title case.">
    <Parameters>
      <Required name="String" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="StrUpper(String)" returnType="String" description="; Converts a string to uppercase.">
    <Parameters>
      <Required name="String" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SubStr(String, StartingPos [, Length])" returnType="String" description="; Retrieves one or more characters from the specified position in a string.">
    <Parameters>
      <Required name="String" type="Unknown" />
      <Required name="StartingPos [" type="Unknown" />
      <Required name="Length]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Suspend([NewState])" returnType="EmptyString" description="; Disables or enables all or selected hotkeys and hotstrings.">
    <Parameters>
      <Optional name="NewState" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SysGet(Property)" returnType="Integer" description="; Retrieves dimensions of system objects, and other system properties.">
    <Parameters>
      <Required name="Property" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="SysGetIPAddresses()" returnType="Array" description="; Returns an array of the system's IPv4 addresses." />
  <Method name="Tan(Number)" returnType="Number" description="; Returns the trigonometric tangent of the specified number.">
    <Parameters>
      <Required name="Number" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Thread(NoTimers [, False])" returnType="EmptyString" description="; Sets the priority or interruptibility of threads. It can also temporarily disable all timers.">
    <Parameters>
      <Required name="NoTimers [" type="Unknown" />
      <Required name="False]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Thread(Priority, Level)" returnType="EmptyString" description="; Sets the priority or interruptibility of threads. It can also temporarily disable all timers.">
    <Parameters>
      <Required name="Priority" type="Unknown" />
      <Required name="Level" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Thread(Interrupt [, Duration, LineCount])" returnType="EmptyString" description="; Sets the priority or interruptibility of threads. It can also temporarily disable all timers.">
    <Parameters>
      <Required name="Interrupt [" type="Unknown" />
      <Required name="Duration" type="Unknown" />
      <Required name="LineCount]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="ToolTip([Text, X, Y, WhichToolTip])" returnType="Integer" description="OR EmptyString                                                                               ; Shows an always-on-top window anywhere on the screen.">
    <Parameters>
      <Required name="[Text" type="Unknown" />
      <Required name="X" type="Unknown" />
      <Required name="Y" type="Unknown" />
      <Required name="WhichToolTip]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="TraySetIcon([FileName, IconNumber, Freeze])" returnType="EmptyString" description="; Changes the script's tray icon (which is also used by GUI and dialog windows).">
    <Parameters>
      <Required name="[FileName" type="Unknown" />
      <Required name="IconNumber" type="Unknown" />
      <Required name="Freeze]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="TrayTip([Text, Title, Options])" returnType="EmptyString" description="; Shows a balloon message window or, on Windows 10 and later, a toast notification near the tray icon.">
    <Parameters>
      <Required name="[Text" type="Unknown" />
      <Required name="Title" type="Unknown" />
      <Required name="Options]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Trim(String [, OmitChars])" returnType="String" description="; Trims characters from the beginning and/or end of a string.">
    <Parameters>
      <Required name="String [" type="Unknown" />
      <Required name="OmitChars]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="Type(Value)" returnType="String" description="; Returns the class name of a value.">
    <Parameters>
      <Required name="Value" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="VarSetStrCapacity(&amp;TargetVar [, RequestedCapacity])" returnType="Integer" description="; Enlarges a variable's holding capacity or frees its memory. This is not normally needed, but may be used with DllCall or SendMessage or to optimize repeated concatenation.">
    <Parameters>
      <Required name="&amp;TargetVar [" type="Unknown" />
      <Required name="RequestedCapacity]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="VerCompare(VersionA, VersionB)" returnType="Integer" description="; Compares two version strings.">
    <Parameters>
      <Required name="VersionA" type="Unknown" />
      <Required name="VersionB" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinActivate([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Activates the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinActivateBottom([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Same as WinActivate except that it activates the bottommost matching window rather than the topmost.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinActive([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Checks if the specified window is active and returns its unique ID (HWND).">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinClose([WinTitle, WinText, SecondsToWait, NotInTitle, NotInText])" returnType="EmptyString" description="; Closes the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="SecondsToWait" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinExist([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Checks if the specified window exists and returns the unique ID (HWND) of the first matching window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetClass([WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Retrieves the specified window's class name.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetClientPos([&amp;X, &amp;Y, &amp;Width, &amp;Height, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Retrieves the position and size of the specified window's client area.">
    <Parameters>
      <Required name="[&amp;X" type="Unknown" />
      <Required name="&amp;Y" type="Unknown" />
      <Required name="&amp;Width" type="Unknown" />
      <Required name="&amp;Height" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetControls([WinTitle, WinText, NotInTitle, NotInText])" returnType="Array" description="; Returns the control names for all controls in the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetControlsHwnd([WinTitle, WinText, NotInTitle, NotInText])" returnType="Array" description="; Returns the unique ID numbers for all controls in the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetCount([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the number of existing windows that match the specified criteria.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetExStyle([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the extended style of the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetID([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the unique ID number of the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetIDLast([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the unique ID number of the last/bottommost window if there is more than one match.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetList([WinTitle, WinText, NotInTitle, NotInText])" returnType="Array" description="; Returns the unique ID numbers of all existing windows that match the specified criteria.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetMinMax([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns a non-zero number if the specified window is maximized or minimized.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetPID([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the Process ID number of the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetPos([&amp;OutX, &amp;OutY, &amp;OutWidth, &amp;OutHeight, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Retrieves the position and size of the specified window.">
    <Parameters>
      <Required name="[&amp;OutX" type="Unknown" />
      <Required name="&amp;OutY" type="Unknown" />
      <Required name="&amp;OutWidth" type="Unknown" />
      <Required name="&amp;OutHeight" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetProcessName([WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns the name of the process that owns the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetProcessPath([WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns the full path and name of the process that owns the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetStyle([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="; Returns the style of the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetText([WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Retrieves the text from the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetTitle([WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Retrieves the title of the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetTransColor([WinTitle, WinText, NotInTitle, NotInText])" returnType="String" description="; Returns the color that is marked transparent in the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinGetTransparent([WinTitle, WinText, NotInTitle, NotInText])" returnType="Integer" description="or EmptyString                                                     ; Returns the degree of transparency of the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinHide[WinTitle, WinText, NotInTitle, NotInText]()" returnType="EmptyString" description="; Hides the specified window." />
  <Method name="WinKill([WinTitle, WinText, SecondsToWait, NotInTitle, NotInText])" returnType="EmptyString" description="; Forces the specified window to close.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="SecondsToWait" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinMaximize([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Enlarges the specified window to its maximum size.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinMinimize([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Collapses the specified window into a button on the task bar.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinMinimizeAll()" returnType="EmptyString" description="; Minimizes or unminimizes all windows." />
  <Method name="WinMinimizeAllUndo()" returnType="EmptyString" description="; Minimizes or unminimizes all windows." />
  <Method name="WinMove([X, Y, Width, Height, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the position and/or size of the specified window.">
    <Parameters>
      <Required name="[X" type="Unknown" />
      <Required name="Y" type="Unknown" />
      <Required name="Width" type="Unknown" />
      <Required name="Height" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinMoveBottom([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Sends the specified window to the bottom of stack; that is, beneath all other windows.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinMoveTop([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Brings the specified window to the top of the stack without explicitly activating it.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinRedraw([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Redraws the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinRestore([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Unminimizes or unmaximizes the specified window if it is minimized or maximized.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetAlwaysOnTop([NewSetting, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Makes the specified window stay on top of all other windows (except other always-on-top windows).">
    <Parameters>
      <Required name="[NewSetting" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetEnabled(NewSetting [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Enables or disables the specified window.">
    <Parameters>
      <Required name="NewSetting [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetExStyle(Value [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the extended style of the specified window.">
    <Parameters>
      <Required name="Value [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetRegion([Options, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the shape of the specified window to be the specified rectangle, ellipse, or polygon.">
    <Parameters>
      <Required name="[Options" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetStyle(Value [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the style of the specified window.">
    <Parameters>
      <Required name="Value [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetTitle(NewTitle [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Changes the title of the specified window.">
    <Parameters>
      <Required name="NewTitle [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetTransColor(Color [, WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Makes all pixels of the chosen color invisible inside the specified window.">
    <Parameters>
      <Required name="Color [" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinSetTransparent(N, WinTitle, WinText, NotInTitle, NotInText)" returnType="EmptyString" description="; Makes the specified window semi-transparent.">
    <Parameters>
      <Required name="N" type="Unknown" />
      <Required name="WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinShow([WinTitle, WinText, NotInTitle, NotInText])" returnType="EmptyString" description="; Unhides the specified window.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinWait([WinTitle, WinText, Timeout, NotInTitle, NotInText])" returnType="Integer" description="; Waits until the specified window exists.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="Timeout" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinWaitActive([WinTitle, WinText, Timeout, NotInTitle, NotInText])" returnType="Integer" description="; Waits until the specified window is active or not active.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="Timeout" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinWaitClose([WinTitle, WinText, Timeout, NotInTitle, NotInText])" returnType="Integer" description="; Waits until no matching windows can be found.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="Timeout" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
  <Method name="WinWaitNotActive([WinTitle, WinText, Timeout, NotInTitle, NotInText])" returnType="Integer" description="; Waits until the specified window is active or not active.">
    <Parameters>
      <Required name="[WinTitle" type="Unknown" />
      <Required name="WinText" type="Unknown" />
      <Required name="Timeout" type="Unknown" />
      <Required name="NotInTitle" type="Unknown" />
      <Required name="NotInText]" type="Unknown" />
    </Parameters>
  </Method>
</Method>