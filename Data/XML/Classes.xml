<Class name="Any">
  <Method name=".Base" returnType="Prototype" description="; Retrieves the value's base object.">
    <Method name=".GetMethod([Name, ParamCount])" returnType="Func" description="; Retrieves the implementation function of a method.">
      <Parameters>
        <Required name="[Name" type="Unknown"/>
        <Required name="ParamCount]" type="Unknown"/>
      </Parameters>
    </Method>
    <Method name=".HasBase(BaseObj)" returnType="Integer" description="; Returns true if the specified base object is in the value's chain of base objects.">
      <Parameters>
        <Required name="BaseObj" type="Unknown"/>
      </Parameters>
    </Method>
    <Method name=".HasMethod([Name, ParamCount])" returnType="Integer" description="; Returns true if the value has a method by this name.">
      <Parameters>
        <Required name="[Name" type="Unknown"/>
        <Required name="ParamCount]" type="Unknown"/>
      </Parameters>
    </Method>
    <Method name=".HasProp(Name)" returnType="Integer" description="; Returns true if the value has a property by this name.">
      <Parameters>
        <Required name="Name" type="Unknown"/>
      </Parameters>
    </Method>
    <Method name="Object" returnType="Object" description="">
      <Method name="Call()" returnType="Object" description="; Creates a new Object when Object() is called."/>
      <Method name=".Base" returnType="Prototype" description="; Retrieves or sets an object's base object."/>
      <Method name=".Clone()" returnType="Object" description="; Returns a shallow copy of an object."/>
      <Method name=".DefineProp(Name, Descriptor)" returnType="Object" description="; Defines a new own property.">
        <Parameters>
          <Required name="Name" type="Unknown"/>
          <Required name="Descriptor" type="Unknown"/>
        </Parameters>
      </Method>
      <Method name=".DeleteProp(Name)" returnType="Any" description="; Removes an own property from an object.">
        <Parameters>
          <Required name="Name" type="Unknown"/>
        </Parameters>
      </Method>
      <Method name=".GetOwnPropDesc(Name)" returnType="Object" description="; Returns a descriptor for a given own property, compatible with DefineProp.">
        <Parameters>
          <Required name="Name" type="Unknown"/>
        </Parameters>
      </Method>
      <Method name=".HasOwnProp(Name)" returnType="Integer" description="; Returns 1 (true) if an object owns a property by the specified name.">
        <Parameters>
          <Required name="Name" type="Unknown"/>
        </Parameters>
      </Method>
      <Method name=".OwnProps()" returnType="Enumerator" description="; Enumerates an object's own properties."/>
      <Method name="Array" returnType="Array" description="">
        <Method name="Call([Val1 , Val2, ..., ValN])" returnType="Array" description="; Creates a new Array containing any specified items when Array() is called.">
          <Parameters>
            <Required name="[Val1" type="Unknown"/>
            <Required name="Val2" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="ValN]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Length" returnType="Integer" description="; Retrieves or sets the length of an array."/>
        <Method name=".Capacity" returnType="Integer" description="; Retrieves or sets the current capacity of an array."/>
        <Method name=".Default" returnType="Any" description="; Defines the default value returned when an element with no value is requested."/>
        <Method name=".__Item" returnType="Any" description="; Retrieves or sets the value of an array element."/>
        <Method name=".Clone()" returnType="Array" description="; Returns a shallow copy of an array."/>
        <Method name=".Delete(Index)" returnType="Any" description="; Removes the value of an array element, leaving the index without a value.">
          <Parameters>
            <Required name="Index" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Get(Index)" returnType="Any" description="; Returns the value at a given index, or a default value.">
          <Parameters>
            <Required name="Index" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Has(Index)" returnType="Integer" description="; Returns a non-zero number if the index is valid and there is a value at that position.">
          <Parameters>
            <Required name="Index" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".InsertAt(Index, Val1 [, Val2, ..., ValN])" returnType="EmptyString" description="; Inserts one or more values at a given position.">
          <Parameters>
            <Required name="Index" type="Unknown"/>
            <Required name="Val1 [" type="Unknown"/>
            <Required name="Val2" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="ValN]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Pop()" returnType="Integer" description="; Removes and returns the last array element."/>
        <Method name=".Push()" returnType="EmptyString" description="; Appends values to the end of an array."/>
        <Method name=".RemoveAt(Index [, Length])" returnType="Any" description="; Remove and return item at the specified index.">
          <Parameters>
            <Required name="Index [" type="Unknown"/>
            <Required name="Length]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".__New([Val1, Val2, ..., ValN])" returnType="EmptyString" description="; Appends items. Equivalent to Push. Exists to support Call, and is not intended to be called directly.">
          <Parameters>
            <Required name="[Val1" type="Unknown"/>
            <Required name="Val2" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="ValN]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".__Enum()" returnType="Enumerator" description="; Enumerates array elements."/>
      </Method>
      <Method name="Buffer" returnType="Buffer" description="">
        <Class name="Call([ByteCount, FillByte])                                                         ; Allocates or reallocates the buffer and optionally fills it."/>
        <Class name=".Ptr                                                                                ; Retrieves the buffer's current memory address."/>
        <Class name=".Size                                                                               ; Retrieves or sets the buffer's size, in bytes."/>
        <Class name=".__New([ByteCount, FillByte])                                                       ; Allocates or reallocates the buffer and optionally fills it."/>
        <Method name="ClipboardAll" returnType="Buffer" description=""/>
      </Method>
      <Method name="Class" returnType="Class" description="">
        <Method name="Call(Params*)" returnType="ClassInstance" description="; Constructs a new instance of the class.">
          <Parameters>
            <Required name="Params*" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Prototype" returnType="Prototype" description="; Retrieves or sets the object on which all instances of the class are based."/>
      </Method>
      <Method name="Error" returnType="Error" description="">
        <Method name="Call(Message [, What, Extra])" returnType="Error" description="; Creates an Error object">
          <Parameters>
            <Required name="Message [" type="Unknown"/>
            <Required name="What" type="Unknown"/>
            <Required name="Extra]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Message" returnType="String" description="; An error message."/>
        <Method name=".What" returnType="String" description="; What threw the exception. This is usually the name of a function, but is blank for exceptions thrown due to an error in an expression (such as using a math operator on a non-numeric value)."/>
        <Method name=".Extra" returnType="String" description="; A string value relating to the error, if available. If this value can be converted to a non-empty string, the standard error dialog displays a line with &quot;Specifically:&quot; followed by this string."/>
        <Method name=".File" returnType="String" description="; The full path of the script file which contains the line at which the error occurred, or at which the Error object was constructed."/>
        <Method name=".Line" returnType="Integer" description="; The line number at which the error occurred, or at which the Error object was constructed."/>
        <Method name=".Stack" returnType="String" description="; A string representing the call stack at the time the Error object was constructed. Each line may be formatted as follows:"/>
        <Method name="MemoryError" returnType="Error" description="; A memory allocation failed."/>
        <Method name="OSError" returnType="Error" description="; An internal function call to a Win32 function failed. Message includes an error code and description generated by the operating system. OSErrors have an additional Number property which contains the error code. Calling OSError(Code) where Code is numeric sets Number and Message based on the given OS-defined error code. If Code is omitted, it defaults to A_LastError. For example, OSError(5).Message returns &quot;(5) Access is denied.&quot;"/>
        <Method name="TargetError" returnType="Error" description="; A function failed because its target could not be found. Message indicates what kind of target, such as a window, control, menu or status bar."/>
        <Method name="TimeoutError" returnType="Error" description="; SendMessage timed out."/>
        <Method name="TypeError" returnType="Error" description="; An unexpected type of value was used as input for a function, property assignment, or some other operation. Usually Message indicates the expected and actual type, and Extra contains a string representing the errant value."/>
        <Method name="UnsetError" returnType="Error" description="; An attempt was made to read or access something that was never set.">
          <Method name="MemberError" returnType="Error" description="; An attempt was made to call a method or read a property value that doesn't exist.">
            <Method name="PropertyError" returnType="Error" description="; An attempt was made to read a property value that doesn't exist."/>
            <Method name="MethodError" returnType="Error" description="; An attempt was made to call a method that doesn't exist."/>
          </Method>
          <Method name="UnsetItemError" returnType="Error" description="; An attempt was made to access an item that doesn't exist."/>
        </Method>
        <Method name="ValueError" returnType="Error" description="; An unexpected value was used as input for a function, property assignment, or some other operation. Usually Message indicates which expectation was broken, and Extra contains a string representing the errant value.">
          <Method name="IndexError" returnType="Error" description="; The index parameter of an object's __Item property was invalid or out of range."/>
        </Method>
        <Method name="ZeroDivisionError" returnType="Error" description="; Division by zero was attempted in an expression or with the Mod function."/>
      </Method>
      <Class name="File">
        <Method name=".Pos" returnType="Integer" description="; Retrieves or sets the position of the file pointer."/>
        <Method name=".Length" returnType="Integer" description="; Retrieves or sets the size of the file."/>
        <Method name=".AtEOF" returnType="Integer" description="; Retrieves a non-zero number if the file pointer has reached the end of the file."/>
        <Method name=".Encoding" returnType="String" description="; Retrieves or sets the text encoding used by this file object."/>
        <Method name=".Handle" returnType="Integer" description="; Retrieves a system file handle, intended for use with DllCall."/>
        <Method name=".Read([Characters])" returnType="String" description="; Reads a string of characters from the file and advances the file pointer.">
          <Parameters>
            <Optional name="Characters" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Write(String)" returnType="Integer" description="; Writes a string of characters to the file and advances the file pointer.">
          <Parameters>
            <Required name="String" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".ReadLine()" returnType="String" description="; Reads a line of text from the file and advances the file pointer."/>
        <Method name=".WriteLine([String])" returnType="Integer" description="; Writes a line of text to the file and advances the file pointer.">
          <Parameters>
            <Optional name="String" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".ReadUInt()" returnType="Integer" description="; Reads a 32-bit unsigned integer from the file and advances the file pointer."/>
        <Method name=".ReadInt()" returnType="Integer" description="; Reads a 32-bit signed integer from the file and advances the file pointer."/>
        <Method name=".ReadInt64()" returnType="Integer" description="; Reads a 64-bit integer from the file and advances the file pointer."/>
        <Method name=".ReadShort()" returnType="Integer" description="; Reads a 16-bit signed integer from the file and advances the file pointer."/>
        <Method name=".ReadUShort()" returnType="Integer" description="; Reads a 16-bit unsigned integer from the file and advances the file pointer."/>
        <Method name=".ReadChar()" returnType="Integer" description="; Reads an 8-bit signed from the file and advances the file pointer."/>
        <Method name=".ReadUChar()" returnType="Integer" description="; Reads an 8-bit unsigned integer from the file and advances the file pointer."/>
        <Method name=".ReadDouble()" returnType="Float" description="; Reads a 64-bit floating point number from the file and advances the file pointer."/>
        <Method name=".ReadFloat()" returnType="Float" description="; Reads a 32-bit floating point number from the file and advances the file pointer."/>
        <Method name=".WriteUInt(Num)" returnType="Integer" description="; Writes a 32-bit unsigned integer to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteInt(Num)" returnType="Integer" description="; Writes a 32-bit signed integer to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteInt64(Num)" returnType="Integer" description="; Writes a 64-bit integer to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteShort(Num)" returnType="Integer" description="; Writes a 16-bit signed integer to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteUShort(Num)" returnType="Integer" description="; Writes a 16-bit unsigned integer to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteChar(Num)" returnType="Integer" description="; Writes an 8-bit signed to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteUChar(Num)" returnType="Integer" description="; Writes an 8-bit unsigned integer to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteDouble(Num)" returnType="Integer" description="; Writes a 64-bit floating point number to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".WriteFloat(Num)" returnType="Integer" description="; Writes a 32-bit floating point number to the file and advances the file pointer.">
          <Parameters>
            <Required name="Num" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".RawRead(Buffer [, Bytes])" returnType="Integer" description="; Reads raw binary data from the file into memory and advances the file pointer.">
          <Parameters>
            <Required name="Buffer [" type="Unknown"/>
            <Required name="Bytes]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".RawWrite(Data [, Bytes])" returnType="Integer" description="; Writes raw binary data to the file and advances the file pointer.">
          <Parameters>
            <Required name="Data [" type="Unknown"/>
            <Required name="Bytes]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Seek(Distance [, Origin])" returnType="Integer" description="; Moves the file pointer.">
          <Parameters>
            <Required name="Distance [" type="Unknown"/>
            <Required name="Origin]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Close()" returnType="EmptyString" description="; Closes the file, flushes any data in the cache to disk and releases the share locks."/>
      </Class>
      <Class name="Func">
        <Method name=".Name" returnType="String" description="; Returns the function's name."/>
        <Method name=".IsBuiltIn" returnType="Integer" description="; Returns 1 (true) if the function is built-in, otherwise 0 (false)."/>
        <Method name=".IsVariadic" returnType="Integer" description="; Returns 1 (true) if the function is variadic, otherwise 0 (false)."/>
        <Method name=".MinParams" returnType="Integer" description="; Returns the number of required parameters."/>
        <Method name=".MaxParams" returnType="Integer" description="; Returns the number of formally-declared parameters for a user-defined function or maximum parameters for a built-in function."/>
        <Method name=".Call(Param1, ..., ParamN*)" returnType="Any" description="; Calls the function.">
          <Parameters>
            <Required name="Param1" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="ParamN*" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Bind(Param1, ..., ParamN*)" returnType="BoundFunc" description="; Binds parameters to the function.">
          <Parameters>
            <Required name="Param1" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="ParamN*" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".IsByRef([ParamIndex])" returnType="Integer" description="; Determines whether a parameter is ByRef.">
          <Parameters>
            <Optional name="ParamIndex" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".IsOptional([ParamIndex])" returnType="Integer" description="; Determines whether a parameter is optional.">
          <Parameters>
            <Optional name="ParamIndex" type="Unknown"/>
          </Parameters>
        </Method>
        <Class name="BoundFunc"/>
        <Class name="Closure"/>
        <Class name="Enumerator">
          <Method name=".Call()" returnType="Integer" description="; Retrieves the next item or items in an enumeration."/>
        </Class>
      </Class>
      <Method name="Gui" returnType="Gui" description="">
        <Method name="Call([Options, Title, EventObj])" returnType="Gui" description="; Creates a new window.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Title" type="Unknown"/>
            <Required name="EventObj]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".BackColor" returnType="Integer" description="; Retrieves or sets the background color of the window."/>
        <Method name=".FocusedCtrl" returnType="Gui" description=".Control                                                         ; Retrieves the GuiControl object of the window's focused control."/>
        <Method name=".Hwnd" returnType="Integer" description="; Retrieves the window handle (HWND) of the window."/>
        <Method name=".MarginX" returnType="Integer" description="; Retrieves or sets the size of horizontal margins between sides and subsequently created controls."/>
        <Method name=".MarginY" returnType="Integer" description="; Retrieves or sets the size of vertical margins between sides and subsequently created controls."/>
        <Method name=".MenuBar" returnType="MenuBar" description="; Retrieves or sets the window's menu bar."/>
        <Method name=".Name" returnType="String" description="; Retrieves or sets a custom name for the window."/>
        <Method name=".Title" returnType="String" description="; Retrieves or sets the window's title."/>
        <Method name=".__Item" returnType="Gui" description=".Control                                                              ; Retrieves the GuiControl object associated with the specified name, text, ClassNN or HWND."/>
        <Method name=".Add(ControlType, [Options, Text])" returnType="Gui" description=".Control                                   ; Creates a new control and adds it to the window.">
          <Parameters>
            <Required name="ControlType" type="Unknown"/>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddActiveX([Options, CompontnetName])" returnType="Gui" description=".ActiveX                               ; Creates a new ActiveX control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="CompontnetName]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddButton([Options, Label])" returnType="Gui" description=".Button                                          ; Creates a new Button control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Label]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddCheckBox([Options, Label])" returnType="Gui" description=".CheckBox                                      ; Creates a new CheckBox control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Label]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddComboBox([Options, ArrayOfItems])" returnType="Gui" description=".ComboBox                               ; Creates a new ComboBox control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="ArrayOfItems]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddCustom([Options, Param2])" returnType="Gui" description=".Custom                                         ; Creates a new Custom control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Param2]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddDateTime([Options, DateFormat])" returnType="Gui" description=".DateTime                                 ; Creates a new DateTime control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="DateFormat]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddDropDownList([Options, ArrayOfItems])" returnType="Gui" description=".DDL                                ; Creates a new DropDownList control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="ArrayOfItems]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddDDL([Options, ArrayOfItems])" returnType="Gui" description=".DDL                                         ; Creates a new DropDownList control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="ArrayOfItems]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddEdit([Options, Text])" returnType="Gui" description=".Edit                                               ; Creates a new Edit control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddGroupBox([Options, Label])" returnType="Gui" description=".GroupBox                                      ; Creates a new GroupBox control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Label]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddHotkey([Options, HotkeyText])" returnType="Gui" description=".Hotkey                                     ; Creates a new Hotkey control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="HotkeyText]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddLink([Options, Text])" returnType="Gui" description=".Link                                               ; Creates a new Link control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddListBox([Options, ArrayOfItems])" returnType="Gui" description=".ListBox                                 ; Creates a new ListBox control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="ArrayOfItems]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddListView([Options, ArrayOfColTitles])" returnType="Gui" description=".ListView                           ; Creates a new ListView control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="ArrayOfColTitles]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddMonthCal([Options, Date])" returnType="Gui" description=".MonthCal                                       ; Creates a new MonthCal control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Date]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddPicture([Options, ImgPath])" returnType="Gui" description=".Pic                                          ; Creates a new Picture control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="ImgPath]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddPic([Options, ImgPath])" returnType="Gui" description=".Pic                                              ; Creates a new Picture control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="ImgPath]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddProgress([Options, Text])" returnType="Gui" description=".Progress                                       ; Creates a new Progress control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddRadio([Options, Text])" returnType="Gui" description=".Radio                                             ; Creates a new Radio control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddSlider([Options, Text])" returnType="Gui" description=".Slider                                           ; Creates a new Slider control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddStatusBar([Options, Text])" returnType="Gui" description=".                                              ; Creates a new StatusBar control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddTab([Options, Text])" returnType="Gui" description=".Tab                                                 ; Creates a new Tab control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddTab2([Options, Text])" returnType="Gui" description=".Tab                                                ; Creates a new Tab2 control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddTab3([Options, Text])" returnType="Gui" description=".Tab                                                ; Creates a new Tab3 control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddText([Options, Text])" returnType="Gui" description=".Text                                               ; Creates a new Text control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddTreeView([Options, Text])" returnType="Gui" description=".TreeView                                       ; Creates a new TreeView control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddUpDown([Options, Text])" returnType="Gui" description=".UpDown                                           ; Creates a new UpDown control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Text]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Destroy()" returnType="EmptyString" description="; Deletes the window."/>
        <Method name=".Flash([Blink])" returnType="EmptyString" description="; Blinks the window and its taskbar button.">
          <Parameters>
            <Optional name="Blink" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".GetClientPos([&amp;X, &amp;Y, &amp;Width, &amp;Height])" returnType="EmptyString" description="; Retrieves the position and size of the window's client area.">
          <Parameters>
            <Required name="[&amp;X" type="Unknown"/>
            <Required name="&amp;Y" type="Unknown"/>
            <Required name="&amp;Width" type="Unknown"/>
            <Required name="&amp;Height]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".GetPos([&amp;X, &amp;Y, &amp;Width, &amp;Height])" returnType="EmptyString" description="; Retrieves the position and size of the window.">
          <Parameters>
            <Required name="[&amp;X" type="Unknown"/>
            <Required name="&amp;Y" type="Unknown"/>
            <Required name="&amp;Width" type="Unknown"/>
            <Required name="&amp;Height]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Hide()" returnType="EmptyString" description="; Hides the window."/>
        <Method name=".Maximize()" returnType="EmptyString" description="; Unhides and maximizes the window."/>
        <Method name=".Minimize()" returnType="EmptyString" description="; Unhides and minimizes the window."/>
        <Method name=".Move([&amp;X, &amp;Y, &amp;Width, &amp;Height])" returnType="EmptyString" description="; Moves and/or resizes the window.">
          <Parameters>
            <Required name="[&amp;X" type="Unknown"/>
            <Required name="&amp;Y" type="Unknown"/>
            <Required name="&amp;Width" type="Unknown"/>
            <Required name="&amp;Height]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".OnEvent(EventName, Callback [, AddRemove])" returnType="EmptyString" description="; Registers a function or method to be called when the given event is raised.">
          <Parameters>
            <Required name="EventName" type="Unknown"/>
            <Required name="Callback [" type="Unknown"/>
            <Required name="AddRemove]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Opt(Options)" returnType="EmptyString" description="; Sets various options and styles for the appearance and behavior of the window.">
          <Parameters>
            <Required name="Options" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Restore()" returnType="EmptyString" description="; Unhides and unminimizes or unmaximizes the window."/>
        <Method name=".SetFont([Options, FontName])" returnType="EmptyString" description="; Sets the typeface, size, style, and text color for subsequently created controls.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="FontName]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Show(Options)" returnType="EmptyString" description="; Displays the window. It can also minimize, maximize, or move the window.">
          <Parameters>
            <Required name="Options" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Submit([Hide])" returnType="Object" description="; Collects the values from named controls and composes them into an Object. Optionally hides the window.">
          <Parameters>
            <Optional name="Hide" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".__Enum()" returnType="Enumerator" description="; Enumerates the window's controls."/>
        <Method name=".__New([Options, Title, EventObj])" returnType="Gui" description="; Constructs a new Gui instance.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="Title" type="Unknown"/>
            <Required name="EventObj]" type="Unknown"/>
          </Parameters>
        </Method>
      </Method>
      <Class name="Gui.Control">
        <Method name=".Focus()" returnType="EmptyString" description="; Sets keyboard focus to the control."/>
        <Method name=".GetPos([&amp;X, &amp;Y, &amp;Width, &amp;Height])" returnType="EmptyString" description="; Retrieves the position and size of the control.">
          <Parameters>
            <Required name="[&amp;X" type="Unknown"/>
            <Required name="&amp;Y" type="Unknown"/>
            <Required name="&amp;Width" type="Unknown"/>
            <Required name="&amp;Height]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Move([&amp;X, &amp;Y, &amp;Width, &amp;Height])" returnType="EmptyString" description="; Moves and/or resizes the control.">
          <Parameters>
            <Required name="[&amp;X" type="Unknown"/>
            <Required name="&amp;Y" type="Unknown"/>
            <Required name="&amp;Width" type="Unknown"/>
            <Required name="&amp;Height]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".OnCommand(NotifyCode, Callback [, AddRemove])" returnType="EmptyString" description="; Registers a function or method to be called on WM_COMMAND.">
          <Parameters>
            <Required name="NotifyCode" type="Unknown"/>
            <Required name="Callback [" type="Unknown"/>
            <Required name="AddRemove]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".OnEvent(EventName, Callback [, AddRemove])" returnType="EmptyString" description="; Registers a function or method to be called when the given event is raised.">
          <Parameters>
            <Required name="EventName" type="Unknown"/>
            <Required name="Callback [" type="Unknown"/>
            <Required name="AddRemove]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".OnNotify(NotifyCode, Callback [, AddRemove])" returnType="EmptyString" description="; Registers a function or method to be called on WM_NOTIFY.">
          <Parameters>
            <Required name="NotifyCode" type="Unknown"/>
            <Required name="Callback [" type="Unknown"/>
            <Required name="AddRemove]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Opt(Options)" returnType="EmptyString" description="; Sets various options and styles for the appearance and behavior of the control.">
          <Parameters>
            <Required name="Options" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Redraw()" returnType="EmptyString" description="; Redraws the region of the GUI window occupied by the control."/>
        <Method name=".SetFont([Options, FontName])" returnType="EmptyString" description="; Sets the font typeface, size, style, and/or color for the control.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="FontName]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".ClassNN" returnType="String" description="; Retrieves the class name and sequence number (ClassNN) of the control."/>
        <Method name=".Enabled" returnType="Integer" description="; Retrieves or sets the interaction state of the control."/>
        <Method name=".Focused" returnType="Integer" description="; Retrieves the focus state of the control."/>
        <Method name=".Gui" returnType="Gui" description="; Retrieves the Gui object of the control's parent window."/>
        <Method name=".Hwnd" returnType="Integer" description="; Retrieves the window handle (HWND) of the control."/>
        <Method name=".Name" returnType="String" description="; Retrieves or sets the explicit name of the control."/>
        <Method name=".Type" returnType="String" description="; Retrieves the type of the control."/>
        <Method name=".Value" returnType="String" description="; Retrieves or sets the contents of a value-capable control."/>
        <Method name=".Visible" returnType="Integer" description="; Retrieves or sets the visibility state of the control."/>
        <Class name="Gui.ActiveX">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text/caption of the control."/>
          <Method name=".Value" returnType="String" description="; The ActiveX object of the control."/>
        </Class>
        <Class name="Gui.Button">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text/caption of the control."/>
        </Class>
        <Class name="Gui.CheckBox">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text/caption of the control."/>
          <Method name=".Value" returnType="String" description="; Retrieves or sets the checked status of the control."/>
        </Class>
        <Class name="Gui.Custom"/>
        <Class name="Gui.DateTime">
          <Method name=".Text" returnType="String" description="; The formatted text displayed by the DateTime control."/>
          <Method name=".Value" returnType="String" description="; Retrieves or sets the date-time stamp of the control."/>
          <Method name=".SetFormat([Format])" returnType="EmptyString" description="">
            <Parameters>
              <Optional name="Format" type="Unknown"/>
            </Parameters>
          </Method>
        </Class>
        <Class name="Gui.Edit">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text of the control."/>
          <Method name=".Value" returnType="String" description="; Retrieves or sets the contents of the control."/>
        </Class>
        <Class name="Gui.GroupBox">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text/caption of the control."/>
        </Class>
        <Class name="Gui.Hotkey"/>
        <Class name="Gui.Link">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text/caption of the control."/>
        </Class>
        <Class name="Gui.List">
          <Method name=".Add(ArrayOfItems)" returnType="EmptyString" description="; Appends items to a multi-item control.">
            <Parameters>
              <Required name="ArrayOfItems" type="Unknown"/>
            </Parameters>
          </Method>
          <Method name=".Choose(Value)" returnType="EmptyString" description="; Selects an item in a multi-item control.">
            <Parameters>
              <Required name="Value" type="Unknown"/>
            </Parameters>
          </Method>
          <Method name=".Delete([Value])" returnType="EmptyString" description="; Deletes one or all items from a multi-item control.">
            <Parameters>
              <Optional name="Value" type="Unknown"/>
            </Parameters>
          </Method>
          <Method name=".Text" returnType="String" description="; The text of the currently selected item/tab of the DropDownList, ComboBox, ListBox or Tab control."/>
          <Method name=".Value" returnType="String" description="; Retrieves or sets the selected item number of the control."/>
          <Class name="Gui.ComboBox"/>
          <Class name="Gui.DDL"/>
          <Class name="Gui.ListBox"/>
          <Class name="Gui.Tab">
            <Method name=".UseTab([Value, ExactMatch])" returnType="EmptyString" description="; Specifies the tab to which subsequently created controls will be added.">
              <Parameters>
                <Required name="[Value" type="Unknown"/>
                <Required name="ExactMatch]" type="Unknown"/>
              </Parameters>
            </Method>
          </Class>
        </Class>
        <Class name="Gui.ListView"/>
        <Class name="Gui.MonthCal"/>
        <Class name="Gui.Pic">
          <Method name=".Value" returnType="String" description="; Retrieves or sets the path of the image."/>
        </Class>
        <Class name="Gui.Progress"/>
        <Class name="Gui.Radio">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text/caption of the control."/>
          <Method name=".Value" returnType="String" description="; Retrieves or sets the checked status of the control."/>
        </Class>
        <Class name="Gui.Slider"/>
        <Class name="Gui.StatusBar">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text of the first control section."/>
          <Method name=".SetText(NewText [, PartNumber, Style])" returnType="EmptyString" description="; Displays NewText in the specified part of the status bar.">
            <Parameters>
              <Required name="NewText [" type="Unknown"/>
              <Required name="PartNumber" type="Unknown"/>
              <Required name="Style]" type="Unknown"/>
            </Parameters>
          </Method>
          <Method name=".SetParts([Width1, Width2, ..., Width255])" returnType="Integer" description="; Divides the bar into multiple sections according to the specified widths (in pixels).">
            <Parameters>
              <Required name="[Width1" type="Unknown"/>
              <Required name="Width2" type="Unknown"/>
              <Required name="..." type="Unknown"/>
              <Required name="Width255]" type="Unknown"/>
            </Parameters>
          </Method>
          <Method name=".SetIcon(FileName [, IconNumber, PartNumber])" returnType="Integer" description="; Sets the icon to be displayed next to a menu item.">
            <Parameters>
              <Required name="FileName [" type="Unknown"/>
              <Required name="IconNumber" type="Unknown"/>
              <Required name="PartNumber]" type="Unknown"/>
            </Parameters>
          </Method>
        </Class>
        <Class name="Gui.Text">
          <Method name=".Text" returnType="String" description="; Retrieves or sets the text/caption of the control."/>
        </Class>
        <Class name="Gui.TreeView"/>
        <Class name="Gui.UpDown"/>
      </Class>
      <Method name="InputHook" returnType="InputHook" description="">
        <Method name="Call([Options, EndKeys, MatchList])" returnType="InputHook" description="; Creates an object which can be used to collect or intercept keyboard input.">
          <Parameters>
            <Required name="[Options" type="Unknown"/>
            <Required name="EndKeys" type="Unknown"/>
            <Required name="MatchList]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".EndKey" returnType="String" description="; Returns the name of the end key which was pressed to terminate the Input."/>
        <Method name=".EndMods" returnType="String" description="; Returns a string of the modifiers which were logically down when Input was terminated."/>
        <Method name=".EndReason" returnType="String" description="; Returns an EndReason string indicating how Input was terminated."/>
        <Method name=".InProgress" returnType="Integer" description="; Returns 1 (true) if the Input is in progress, otherwise 0 (false)."/>
        <Method name=".Input" returnType="String" description="; Returns any text collected since the last time Input was started."/>
        <Method name=".Match" returnType="String" description="; Returns the MatchList item which caused the Input to terminate."/>
        <Method name=".OnEnd" returnType="Func" description="; Retrieves or sets the function object which is called when Input is terminated."/>
        <Method name=".OnChar" returnType="Func" description="; Retrieves or sets the function object which is called after a character is added to the input buffer."/>
        <Method name=".OnKeyDown" returnType="Func" description="; Retrieves or sets the function object which is called when a notification-enabled key is pressed."/>
        <Method name=".OnKeyUp" returnType="Func" description="; Retrieves or sets the function object which is called when a notification-enabled key is released."/>
        <Method name=".BackspaceIsUndo" returnType="Integer" description="; Controls whether the Backspace key removes the most recently pressed character from the end of the Input buffer."/>
        <Method name=".CaseSensitive" returnType="Integer" description="; Controls whether MatchList is case-sensitive."/>
        <Method name=".FindAnywhere" returnType="Integer" description="; Controls whether each match can be a substring of the input text."/>
        <Method name=".MinSendLevel" returnType="Integer" description="; Retrieves or sets the minimum send level of input to collect."/>
        <Method name=".NotifyNonText" returnType="Integer" description="; Controls whether the OnKeyDown and OnKeyUp callbacks are called whenever a non-text key is pressed."/>
        <Method name=".Timeout" returnType="Number" description="; Retrieves or sets the timeout value in seconds."/>
        <Method name=".VisibleNonText" returnType="Integer" description="; Controls whether keys or key combinations which do not produce text are visible (not blocked)."/>
        <Method name=".VisibleText" returnType="Integer" description="; Controls whether keys or key combinations which produce text are visible (not blocked)."/>
        <Method name=".KeyOpt(Keys, KeyOptions)" returnType="EmptyString" description="; Sets options for a key or list of keys.">
          <Parameters>
            <Required name="Keys" type="Unknown"/>
            <Required name="KeyOptions" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Start()" returnType="EmptyString" description="; Starts collecting input."/>
        <Method name=".Stop()" returnType="EmptyString" description="; Terminates the Input and sets EndReason to the word Stopped."/>
        <Method name=".Wait([MaxTime])" returnType="String" description="; Waits until the Input is terminated (InProgress is false).">
          <Parameters>
            <Optional name="MaxTime" type="Unknown"/>
          </Parameters>
        </Method>
      </Method>
      <Method name="Map" returnType="Map" description="">
        <Method name="Call([Key1, Value1, ..., ..., KeyN, ValueN])" returnType="Map" description="; Creates a Map object and sets items.">
          <Parameters>
            <Required name="[Key1" type="Unknown"/>
            <Required name="Value1" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="KeyN" type="Unknown"/>
            <Required name="ValueN]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Count" returnType="Integer" description="; Retrieves the number of key-value pairs present in a map."/>
        <Method name=".Capacity" returnType="Integer" description="; Retrieves or sets the current capacity of a map."/>
        <Method name=".CaseSense" returnType="Integer" description="; Retrieves or sets a map's case sensitivity setting."/>
        <Method name=".Default" returnType="Any" description="; Defines the default value returned when a key is not found."/>
        <Method name=".__Item" returnType="Any" description="; Retrieves or sets the value of a key-value pair."/>
        <Method name=".Clear()" returnType="EmptyString" description="; Removes all key-value pairs from a map."/>
        <Method name=".Clone()" returnType="Map" description="; Returns a shallow copy of a map."/>
        <Method name=".Delete(Key)" returnType="Any" description="; Removes a key-value pair from a map.">
          <Parameters>
            <Required name="Key" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Get(Key [, Default])" returnType="Any" description="; Returns the value associated with a key, or a default value.">
          <Parameters>
            <Required name="Key [" type="Unknown"/>
            <Required name="Default]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Has(Key)" returnType="Integer" description="; Returns true if the specified key has an associated value within a map.">
          <Parameters>
            <Required name="Key" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Set([Key1, Value1, ..., ..., KeyN, ValueN])" returnType="Map" description="; Sets zero or more items.">
          <Parameters>
            <Required name="[Key1" type="Unknown"/>
            <Required name="Value1" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="KeyN" type="Unknown"/>
            <Required name="ValueN]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".__Enum()" returnType="Enumerator" description="; Enumerates key-value pairs."/>
        <Method name=".__New([Key1, Value1, ..., ..., KeyN, ValueN])" returnType="Map" description="; Sets items. Equivalent to Set.">
          <Parameters>
            <Required name="[Key1" type="Unknown"/>
            <Required name="Value1" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="KeyN" type="Unknown"/>
            <Required name="ValueN]" type="Unknown"/>
          </Parameters>
        </Method>
      </Method>
      <Method name="Menu" returnType="Menu" description="">
        <Method name="Call()" returnType="Menu" description="; Creates a new Menu object."/>
        <Method name=".Add([MenuItemName, CallbackOrSubmenu, Options])" returnType="EmptyString" description="; Adds or modifies a menu item.">
          <Parameters>
            <Required name="[MenuItemName" type="Unknown"/>
            <Required name="CallbackOrSubmenu" type="Unknown"/>
            <Required name="Options]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".AddStandard()" returnType="EmptyString" description="; Adds the standard tray menu items."/>
        <Method name=".Check(MenuItemName)" returnType="EmptyString" description="; Adds a visible checkmark next to a menu item.">
          <Parameters>
            <Required name="MenuItemName" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Delete([MenuItemName])" returnType="EmptyString" description="; Deletes one or all menu items.">
          <Parameters>
            <Optional name="MenuItemName" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Disable(MenuItemName)" returnType="EmptyString" description="; Grays out a menu item to indicate that the user cannot select it.">
          <Parameters>
            <Required name="MenuItemName" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Enable(MenuItemName)" returnType="EmptyString" description="; Allows the user to once again select a menu item if was previously disabled (grayed out).">
          <Parameters>
            <Required name="MenuItemName" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Insert([MenuItemName, ItemToInsert, CallbackOrSubmenu, Options])" returnType="EmptyString" description="; Inserts a new item before the specified item.">
          <Parameters>
            <Required name="[MenuItemName" type="Unknown"/>
            <Required name="ItemToInsert" type="Unknown"/>
            <Required name="CallbackOrSubmenu" type="Unknown"/>
            <Required name="Options]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Rename(MenuItemName [, NewName])" returnType="EmptyString" description="; Renames a menu item.">
          <Parameters>
            <Required name="MenuItemName [" type="Unknown"/>
            <Required name="NewName]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".SetColor([ColorValue, ApplyToSubmenus])" returnType="EmptyString" description="; Changes the background color of the menu.">
          <Parameters>
            <Required name="[ColorValue" type="Unknown"/>
            <Required name="ApplyToSubmenus]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".SetIcon(MenuItemName, FileName [, IconNumber, IconWidth])" returnType="EmptyString" description="; Sets the icon to be displayed next to a menu item.">
          <Parameters>
            <Required name="MenuItemName" type="Unknown"/>
            <Required name="FileName [" type="Unknown"/>
            <Required name="IconNumber" type="Unknown"/>
            <Required name="IconWidth]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Show([X, Y])" returnType="EmptyString" description="; Displays the menu.">
          <Parameters>
            <Required name="[X" type="Unknown"/>
            <Required name="Y]" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".ToggleCheck(MenuItemName)" returnType="EmptyString" description="; Toggles the checkmark next to a menu item.">
          <Parameters>
            <Required name="MenuItemName" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".ToggleEnable(MenuItemName)" returnType="EmptyString" description="; Enables or disables a menu item.">
          <Parameters>
            <Required name="MenuItemName" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Uncheck(MenuItemName)" returnType="EmptyString" description="; Removes the checkmark (if there is one) from a menu item.">
          <Parameters>
            <Required name="MenuItemName" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".ClickCount" returnType="Integer" description="; Retrieves or sets how many times the tray icon must be clicked to select its default menu item."/>
        <Method name=".Default" returnType="String" description="; Retrieves or sets the default menu item."/>
        <Method name=".Handle" returnType="Integer" description="; Retrieves the menu's Win32 handle."/>
        <Method name="MenuBar" returnType="MenuBar" description="">
          <Method name="Call()" returnType="MenuBar" description="; Creates a new Menu object."/>
        </Method>
      </Method>
      <Class name="RegExMatchInfo">
        <Method name=".Count" returnType="Integer" description="; Returns the overall number of subpatterns (capturing groups), which is also the maximum value for N."/>
        <Method name=".Len" returnType="Integer" description="; Returns the length of the overall match."/>
        <Method name=".Len[N]" returnType="Integer" description="; Returns the length of a captured subpattern."/>
        <Method name=".Mark" returnType="Integer" description="; Returns the NAME of the last encountered (*MARK:NAME), when applicable."/>
        <Class name=".Match[]                                                                            ; Returns the overall match."/>
        <Class name=".Match[N]                                                                           ; Returns a captured subpattern."/>
        <Method name=".Name[N]" returnType="String" description="; Returns the name of the given subpattern, if it has one."/>
        <Method name=".Pos" returnType="Integer" description="; Returns the position of the overall match."/>
        <Class name=".Pos[N]                                                                             ; Returns the position of a captured subpattern."/>
        <Method name=".Name(N)" returnType="String" description="; Returns the name of the given subpattern, if it has one.">
          <Parameters>
            <Required name="N" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Len(N)" returnType="Integer" description="; Returns the length of a captured subpattern.">
          <Parameters>
            <Required name="N" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name=".Pos(N)" returnType="Integer" description="; Returns the position of a captured subpattern.">
          <Parameters>
            <Required name="N" type="Unknown"/>
          </Parameters>
        </Method>
      </Class>
    </Method>
    <Class name="Primitive">
      <Method name="Number" returnType="Number" description="">
        <Method name="Call(String)" returnType="Number" description="; Converts a numeric string to a pure integer or floating-point number.">
          <Parameters>
            <Required name="String" type="Unknown"/>
          </Parameters>
        </Method>
        <Method name="Float" returnType="Float" description="">
          <Method name="Call(Value)" returnType="Float" description="; Converts a numeric string or integer value to a floating-point number.">
            <Parameters>
              <Required name="Value" type="Unknown"/>
            </Parameters>
          </Method>
        </Method>
        <Method name="Integer" returnType="Integer" description="">
          <Method name="Call(Value)" returnType="Integer" description="; Converts a numeric string or float value to an integer number.">
            <Parameters>
              <Required name="Value" type="Unknown"/>
            </Parameters>
          </Method>
        </Method>
      </Method>
      <Method name="String" returnType="String" description="">
        <Method name="Call(Value)" returnType="String" description="; Converts a value to a string.">
          <Parameters>
            <Required name="Value" type="Unknown"/>
          </Parameters>
        </Method>
      </Method>
    </Class>
    <Class name="VarRef"/>
    <Method name="ComValue" returnType="ComObject" description="">
      <Method name="Call(VarType, Value [, Flags])" returnType="ComObject" description="; Wraps a value, SafeArray or COM object for use by the script or for passing to a COM method.">
        <Parameters>
          <Required name="VarType" type="Unknown"/>
          <Required name="Value [" type="Unknown"/>
          <Required name="Flags]" type="Unknown"/>
        </Parameters>
      </Method>
      <Method name="ComObjArray" returnType="ComObjArray" description="">
        <Method name="Call(VarType, Count1 [, Count2, ..., Count8])" returnType="ComObjArray" description="; Creates a SafeArray for use with COM.">
          <Parameters>
            <Required name="VarType" type="Unknown"/>
            <Required name="Count1 [" type="Unknown"/>
            <Required name="Count2" type="Unknown"/>
            <Required name="..." type="Unknown"/>
            <Required name="Count8]" type="Unknown"/>
          </Parameters>
        </Method>
      </Method>
      <Method name="ComObject" returnType="ComObject" description="">
        <Method name="Call(CLSID , IID)" returnType="ComObject" description="; Creates a COM object.">
          <Parameters>
            <Required name="CLSID" type="Unknown"/>
            <Required name="IID" type="Unknown"/>
          </Parameters>
        </Method>
      </Method>
      <Class name="ComValueRef"/>
    </Method>
  </Method>
</Class>