<Operators>
  <Operator symbol="(Expression)" description="Any sub-expression enclosed in parentheses. For example, (3 + 2) * 2 forces 3 + 2 to be evaluated first. For a multi-statement expression, the result of the last statement is returned. For example, (a := 1, b := 2, c := 3) returns 3." />
  <Operator symbol="Fn()" description="Function call. There must be no space between the function name or expression and the open parenthesis which begins the parameter list. For details, see Function Calls." />
  <Operator symbol="Fn(Params*)" description="Variadic function call. Params is an enumerable object (an object with an __Enum method), such as an Array containing parameter values." />
  <Operator symbol="x[y]" description="Item access. Get or set the __Item property (or default property) of object x with the parameter y (or multiple parameters in place of y). This typically corresponds to an array element or item within a collection, where y is the item's index or key. The item can be assigned a value by using any assignment operator immediately after the closing bracket. For example, x[y] := z." />
  <Operator symbol="[1, 2]" description="Array literal. If the open-bracket is not preceded by a value (or a sub-expression which yields a value), it is interpreted as the beginning of an array literal. For example, [a, b, c] is equivalent to Array(a, b, c) (a, b and c are variables)." />
  <Operator symbol="{a:1, b:2}" description="Object literal. Create an Object. Each pair consists of a literal property name a and a property value expression b. For example, x := {a: b} is equivalent to x := Object(), x.a := b. Base may be set within the object literal, but all other properties are set as own value properties, potentially overriding properties inherited from the base object." />
  <Operator symbol="%Expression%" description="Dereference or name substitution." />
  <Operator symbol="x.y" description="Member access. Get or set a value or call a method of object x, where y is a literal name and z is an expression which evaluates to a name. See object syntax." />
  <Operator symbol="x.%z%" description="Member access. Get or set a value or call a method of object x, where y is a literal name and z is an expression which evaluates to a name. See object syntax." />
  <Operator symbol="var?" description="Maybe. Permits the variable to be unset. This is valid only when passing a variable to an optional parameter, array element or object literal; or on the right-hand side of a direct assignment. The question mark must be followed by one of the following symbols (ignoring whitespace): )]},:. The variable may be passed conditionally via the ternary operator or on the right-hand side of AND/OR." />
  <Operator symbol="++" description="Pre- and post-increment. Adds 1 to a variable. The operator may appear either before or after the variable's name. If it appears before the name, the operation is performed and its result is used by the next operation (the result is a variable reference in this case). For example, Var := ++X increments X and then assigns its value to Var. Conversely, if the operator appears after the variable's name, the result is the value of X prior to performing the operation. For example, Var := X++ increments X but Var receives the value X had before it was incremented." />
  <Operator symbol="--" description="Pre- and post-decrement. Subtracts 1 from a variable. The operator may appear either before or after the variable's name. If it appears before the name, the operation is performed and its result is used by the next operation (the result is a variable reference in this case). For example, Var := ++X increments X and then assigns its value to Var. Conversely, if the operator appears after the variable's name, the result is the value of X prior to performing the operation. For example, Var := X++ increments X but Var receives the value X had before it was incremented." />
  <Operator symbol="**" description="Power. Example usage: base**exponent. Both base and exponent may contain a decimal point. If exponent is negative, the result will be formatted as a floating point number even if base and exponent are both integers. Since ** is of higher precedence than unary minus, -2**2 is evaluated like -(2**2) and so yields -4. Thus, to raise a literal negative number to a power, enclose it in parentheses such as (-2)**2." />
  <Operator symbol="-" description="Unary minus (-): Inverts the sign of its operand." />
  <Operator symbol="+" description="Unary plus (+): +N is equivalent to -(-N). This has no effect when applied to a pure number, but can be used to convert numeric strings to pure numbers." />
  <Operator symbol="!" description="Logical-not (!): If the operand is blank or 0, the result of applying logical-not is 1, which means &quot;true&quot;. Otherwise, the result is 0 (false). For example: !x or !(y and z). Note: The word NOT is synonymous with ! except that ! has a higher precedence. Consecutive unary operators such as !!Var are allowed because they are evaluated in right-to-left order." />
  <Operator symbol="~" description="Bitwise-not (~): This inverts each bit of its operand. As 64-bit signed integers are used, a positive input value will always give a negative result and vice versa. For example, ~0xf0f evaluates to -0xf10 (-3856), which is binary equivalent to 0xfffffffffffff0f0. If an unsigned 32-bit value is intended, the result can be truncated with result &amp; 0xffffffff. If the operand is a floating point value, a TypeError is thrown." />
  <Operator symbol="&amp;" description="Reference (&amp;): Creates a VarRef, which is a value representing a reference to a variable. A VarRef can then be used to indirectly access the target variable. For example, ref := &amp;target followed by %ref% := 1 would assign the value 1 to target. The VarRef would typically be passed to a function, but could be stored in an array or property. See also: Dereference, ByRef." />
  <Operator symbol="*" description="Multiply (*): The result is an integer if both inputs are integers; otherwise, it is a floating point number." />
  <Operator symbol="/" description="True divide (/): True division yields a floating point result even when both inputs are integers. For example, 3/2 yields 1.5 rather than 1, and 4/2 yields 2.0 rather than 2." />
  <Operator symbol="//" description="Integer divide (//): The double-slash operator uses high-performance integer division. For example, 5//3 is 1 and 5//-3 is -1. If either of the inputs is in floating point format, a TypeError is thrown. For modulo, see Mod." />
  <Operator symbol="+" description="Add (+)" />
  <Operator symbol="-" description="Subtract (-)" />
  <Operator symbol="&lt;&lt;" description="Bit shift left (&lt;&lt;). Example usage: Value1 &lt;&lt; Value2. This is equivalent to multiplying Value1 by &quot;2 to the Value2th power&quot;." />
  <Operator symbol="&gt;&gt;" description="Arithmetic bit shift right (&gt;&gt;). Example usage: Value1 &gt;&gt; Value2. This is equivalent to dividing Value1 by &quot;2 to the Value2th power&quot; and rounding the result to the nearest integer leftward on the number line; for example, -3&gt;&gt;1 is -2." />
  <Operator symbol="&gt;&gt;&gt;" description="Logical bit shift right (&gt;&gt;&gt;). Example usage: Value1 &gt;&gt;&gt; Value2. Unlike arithmetic bit shift right, this does not preserve the sign of the number. For example, -1 has the same bit representation as the unsigned 64-bit integer 0xffffffffffffffff, therefore -1 &gt;&gt;&gt; 1 is 0x7fffffffffffffff." />
  <Operator symbol="&amp;" description="Bitwise-and (&amp;)" />
  <Operator symbol="^" description="Bitwise-exclusive-or (^)" />
  <Operator symbol="|" description="Bitwise-or (|)" />
  <Operator symbol="." description="Concatenate. A period (dot) with at least one space or tab on each side is used to combine two items into a single string. You may also omit the period to achieve the same result (except where ambiguous such as x -y, or when the item on the right side has a leading ++ or --). When the dot is omitted, there must be at least one space or tab between the items to be merged." />
  <Operator symbol="~=" description="Shorthand for RegExMatch. For example, the result of &quot;abc123&quot; ~= &quot;\d&quot; is 4 (the position of the first numeric character)." />
  <Operator symbol="&gt;" description="Greater (&gt;)" />
  <Operator symbol="&lt;" description="Less (&lt;)" />
  <Operator symbol="&gt;=" description="Greater-or-equal" />
  <Operator symbol="&lt;=" description="Less-or-equal" />
  <Operator symbol="=" description="Case-insensitive equal (=)" />
  <Operator symbol="==" description="Case-sensitive equal" />
  <Operator symbol="!=" description="Not-equal" />
  <Operator symbol="!==" description="Case-sensitive not-equal" />
  <Operator symbol="IS" description="(Value IS Class) yields true (1) if Value is an instance of Class or false (0) otherwise. Class must be an Object with a Prototype own property, but typically the property is defined implicitly by a class definition." />
  <Operator symbol="IN" description="Keyword used with the for-loop to enumerate an object. For key, value IN object" />
  <Operator symbol="CONTAINS" description="contains is reserved for future use." />
  <Operator symbol="NOT" description="Logical-NOT. Except for its lower precedence, this is the same as the ! operator. For example, not (x = 3 or y = 3) is the same as !(x = 3 or y = 3)." />
  <Operator symbol="AND" description="Logical-AND. For example: (x &gt; 3 AND x &lt; 10)" />
  <Operator symbol="&amp;&amp;" description="Logical-AND. For example: (x &gt; 3 &amp;&amp; x &lt; 10)" />
  <Operator symbol="OR" description="Logical-OR. For example: (x &lt;= 3 OR x &gt;= 10)." />
  <Operator symbol="||" description="Logical-OR. For example: (x &lt;= 3 || x &gt;= 10)." />
  <Operator symbol="??" description="Or maybe. Otherwise known as the coalescing operator. If the left operand (which must be a variable) has a value, it becomes the result and the right branch is skipped. Otherwise, the right operand becomes the result. In other words, A ?? B behaves like A || B (logical-OR) except that the condition is IsSet(A)." />
  <Operator symbol="?:" description="Ternary operator. This operator is a shorthand replacement for the if-else statement. It evaluates the condition on its left side to determine which of its two branches should become its final result. For example, var := x&gt;y ? 2 : 3 stores 2 in Var if x is greater than y; otherwise it stores 3. To enhance performance, only the winning branch is evaluated (see short-circuit evaluation)." />
  <Operator symbol=":=" description="Assignment operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="+=" description="Add-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="-=" description="Minus-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="*=" description="Multiply-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="/=" description="True-divide-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="//=" description="Integer-divide-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol=".=" description="Concatinate-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="|=" description="Bitwise-or-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="&amp;=" description="Bitwise-and-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="^=" description="Bitwise-xor-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="&gt;&gt;=" description="Bitshift-right-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="&lt;&lt;=" description="Bitshift-left-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="&gt;&gt;&gt;=" description="Logical-bitshift-right-assign operator. Performs the operation using the original variable and the contents on the right, then assigns the result back to the original variable." />
  <Operator symbol="() =&gt; Expression" description="Fat arrow function. Defines a simple function and returns a Func or Closure object. Write the function's parameter list (optionally preceded by a function name) to the left of the operator. When the function is called (via the returned reference), it evaluates the sub-expression expr and returns the result." />
  <Operator symbol="," description="Comma (multi-statement). Commas may be used to write multiple sub-expressions into a single statement. This is most commonly used to group together multiple assignments or function calls. Commas are also used as delimiters between function parameters." />
</Operators>