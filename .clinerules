{
    "version": "1.0.0",
    "rules": {
        "ahkv2_syntax": {
            "description": "AHK v2 Syntax Rules",
            "patterns": [
                {
                    "name": "proper_class_initialization",
                    "description": "Initialize classes correctly without 'new' keyword",
                    "correct": "MyClass()",
                    "incorrect": "new MyClass()",
                    "message": "In AHK v2, classes are initialized without the 'new' keyword"
                },
                {
                    "name": "map_not_object_literal",
                    "description": "Use Map() for key-value data structures, not object literals",
                    "correct": "config := Map(\"width\", 800, \"height\", 600)",
                    "incorrect": "config := {width: 800, height: 600}",
                    "message": "Always use Map() for key-value data structures in AHK v2, object literals can cause issues"
                },
                {
                    "name": "arrow_syntax_limitations",
                    "description": "Use fat arrow functions only for simple, single-line expressions",
                    "correct": "callback := (*) => MsgBox(\"Simple action\")",
                    "incorrect": "callback := (*) => {\n  MsgBox(\"Complex\")\n  DoSomethingElse()\n}",
                    "message": "Reserve arrow functions for simple one-liners only, use traditional methods for multi-line logic"
                },
                {
                    "name": "event_binding",
                    "description": "Always bind event handlers to 'this' when using class methods",
                    "correct": "button.OnEvent(\"Click\", this.HandleClick.Bind(this))",
                    "incorrect": "button.OnEvent(\"Click\", this.HandleClick)",
                    "message": "Event handlers must be explicitly bound to their class instance using .Bind(this)"
                },
                {
                    "name": "double_quote_escaping",
                    "description": "Escape double quotes inside strings with backtick",
                    "correct": "MsgBox(\"He said `\"Hello`\" to me\")",
                    "incorrect": "MsgBox(\"He said \\\"Hello\\\" to me\")",
                    "message": "Use backtick (`) to escape quotes in AHK v2, not backslash"
                },
                {
                    "name": "comment_style",
                    "description": "Use semicolons for comments, not C-style comments",
                    "correct": "; This is a comment",
                    "incorrect": "// This is a comment",
                    "message": "AHK v2 uses semicolons (;) for comments, not forward slashes (//)"
                },
                {
                    "name": "explicit_variable_declarations",
                    "description": "Declare variables explicitly with appropriate scope",
                    "correct": "global myVar := 10",
                    "incorrect": "myVar := 10",
                    "message": "Explicitly declare variables with global, static, or local scope"
                }
            ]
        },
        "ahkv2_best_practices": {
            "description": "AHK v2 Best Practices",
            "patterns": [
                {
                    "name": "requires_directive",
                    "description": "Include proper #Requires directive for AHK v2",
                    "correct": "#Requires AutoHotkey v2.1-alpha.16\n#SingleInstance Force",
                    "incorrect": "",
                    "message": "Always include #Requires directive to specify minimum AHK version"
                },
                {
                    "name": "proper_error_handling",
                    "description": "Use proper error handling with try/catch blocks",
                    "correct": "try {\n    riskyOperation()\n} catch Error as e {\n    MsgBox(\"Error: \" e.Message)\n}",
                    "incorrect": "riskyOperation()",
                    "message": "Wrap operations that might fail in try/catch blocks"
                },
                {
                    "name": "avoid_global_variables",
                    "description": "Avoid global variables when possible",
                    "correct": "class Config {\n    static Settings := Map(\"key\", \"value\")\n}",
                    "incorrect": "global Config := Map(\"key\", \"value\")",
                    "message": "Prefer static class properties over global variables"
                },
                {
                    "name": "proper_gui_cleanup",
                    "description": "Properly clean up GUI resources",
                    "correct": "class MyGui {\n    __Delete() {\n        this.Cleanup()\n    }\n    \n    Cleanup() {\n        this.gui.Destroy()\n    }\n}",
                    "incorrect": "",
                    "message": "Implement cleanup in __Delete method or provide explicit cleanup method"
                }
            ]
        },
        "ahkv2_gui_patterns": {
            "description": "AHK v2 GUI Patterns",
            "patterns": [
                {
                    "name": "gui_object_model",
                    "description": "Use object-oriented GUI model",
                    "correct": "this.gui := Gui()\nthis.gui.AddButton(\"w200\", \"Click Me\").OnEvent(\"Click\", this.HandleClick.Bind(this))",
                    "incorrect": "Gui, Add, Button, w200, Click Me\nGui, Show",
                    "message": "Use the object-oriented GUI model in AHK v2, not legacy command syntax"
                },
                {
                    "name": "gui_event_handling",
                    "description": "Use proper event handling for GUI controls",
                    "correct": "control.OnEvent(\"Change\", this.HandleChange.Bind(this))",
                    "incorrect": "control.OnChange := this.HandleChange",
                    "message": "Use OnEvent method with proper binding for GUI event handling"
                },
                {
                    "name": "gui_variable_binding",
                    "description": "Use proper variable binding in GUI controls",
                    "correct": "this.gui.AddEdit(\"vUserInput w200\")",
                    "incorrect": "UserInput := this.gui.AddEdit(\"w200\")",
                    "message": "Use 'v' option for variable binding in GUI controls"
                }
            ]
        },
        "ahkv2_oop_patterns": {
            "description": "AHK v2 OOP Patterns",
            "patterns": [
                {
                    "name": "class_property_accessors",
                    "description": "Use proper class property accessors",
                    "correct": "class Example {\n    _value := 0\n    \n    Value {\n        get => this._value\n        set => this._value := value\n    }\n}",
                    "incorrect": "class Example {\n    GetValue() {\n        return this.value\n    }\n    \n    SetValue(val) {\n        this.value := val\n    }\n}",
                    "message": "Use property accessors (get/set) instead of getter/setter methods"
                },
                {
                    "name": "method_binding",
                    "description": "Properly bind methods when used as callbacks",
                    "correct": "SetTimer(this.Update.Bind(this), 1000)",
                    "incorrect": "SetTimer(this.Update, 1000)",
                    "message": "Bind methods to their class instance when used as callbacks"
                },
                {
                    "name": "inheritance_pattern",
                    "description": "Use proper inheritance pattern",
                    "correct": "class Child extends Parent {\n    __New() {\n        super.__New()\n    }\n}",
                    "incorrect": "class Child {\n    __New() {\n        this.base := Parent()\n    }\n}",
                    "message": "Use 'extends' keyword for inheritance and call super.__New() in constructor"
                }
            ]
        },
        "ahkv2_hotkey_patterns": {
            "description": "AHK v2 Hotkey Patterns",
            "patterns": [
                {
                    "name": "hotkey_object_model",
                    "description": "Use object-oriented hotkey model",
                    "correct": "Hotkey(\"^c\", this.HandleCopy.Bind(this))",
                    "incorrect": "^c::HandleCopy()",
                    "message": "Use Hotkey() function for programmatic hotkey assignment"
                },
                {
                    "name": "context_sensitive_hotkeys",
                    "description": "Use proper context-sensitive hotkeys",
                    "correct": "HotIfWinActive(\"ahk_class Notepad\")\nHotkey(\"^c\", CopyNotepad)\nHotIf()",
                    "incorrect": "#IfWinActive ahk_class Notepad\n^c::CopyNotepad()\n#If",
                    "message": "Use HotIf directives instead of #If for context-sensitive hotkeys"
                }
            ]
        }
    },
    "documentation": {
        "version_history": "1.0.0 - Initial release with core AHK v2 rules",
        "usage": "Include this file in your project root to enable Cline to enforce AHK v2 code standards"
    }
}
