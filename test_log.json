[
	{
		"Code": "ToggleHotkey(hotkeyString, showToolTip := true) {\n    static hotkeyStates := Map()\n    \n    ; Initialize if first time\n    if !hotkeyStates.Has(hotkeyString)\n        hotkeyStates[hotkeyString] := true\n    \n    ; Toggle the state\n    currentState := hotkeyStates[hotkeyString]\n    newState := !currentState\n    hotkeyStates[hotkeyString] := newState\n    \n    ; Enable or disable the hotkey\n    if newState\n        Hotkey hotkeyString, \"On\"\n    else\n        Hotkey hotkeyString, \"Off\"\n    \n    ; Show tooltip if requested\n    if showToolTip {\n        stateText := newState ? \"Enabled\" : \"Disabled\"\n        ToolTip(\"Hotkey \" hotkeyString \" \" stateText)\n        SetTimer () => ToolTip(), -1000  ; Clear after 1 second\n    }\n    \n    return newState\n}",
		"Company": "Mistral",
		"Errors": "Error: A parameter is missing its comma or a block is missing its opening brace.",
		"Model": "Mistral Large",
		"Notes": "The error is due to missing commas after the hotkeyString parameter in the Hotkey command. Good use of Maps for state management.",
		"PromptBody": "Write a function in AutoHotkey v2 that can toggle any hotkey on and off and display a brief tooltip when the state changes.",
		"PromptTitle": "Hotkey Toggle Function",
		"Timestamp": "04/22/25"
	},
	{
		"Code": "",
		"Company": "Anthropic",
		"Errors": "",
		"Model": "3.7 Sonnet",
		"Notes": "",
		"PromptBody": "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text \n- Save the newly edited version to the users clipboard",
		"PromptTitle": "Clipboard Manager",
		"Timestamp": "04/28/25"
	},
	{
		"Code": "#Requires AutoHotkey v2.1-alpha.17\n#SingleInstance Force\n\nClipboardEditorGui()\n\nclass ClipboardEditorGui {\n  static Cases := Map(\n    \"upper\", \"UPPERCASE\",\n    \"lower\", \"lowercase\",\n    \"title\", \"Title Case\"\n  )\n\n  __New() {\n    this.gui := Gui(\"+AlwaysOnTop\", \"Clipboard Text Editor\")\n    this.gui.SetFont(\"s10\", \"Segoe UI\")\n    this.gui.OnEvent(\"Close\", this.CloseGui.Bind(this))\n    this.gui.OnEvent(\"Escape\", this.CloseGui.Bind(this))\n\n    this.editCtrl := this.gui.AddEdit(\"w400 h300 vEditText +Multi +WantReturn +VScroll\")\n\n    this.gui.AddButton(\"w130\", ClipboardEditorGui.Cases[\"upper\"]).OnEvent(\"Click\", this.ChangeCase.Bind(this, \"upper\"))\n    this.gui.AddButton(\"w130 x+5\", ClipboardEditorGui.Cases[\"lower\"]).OnEvent(\"Click\", this.ChangeCase.Bind(this, \"lower\"))\n    this.gui.AddButton(\"w130 x+5\", ClipboardEditorGui.Cases[\"title\"]).OnEvent(\"Click\", this.ChangeCase.Bind(this, \"title\"))\n\n    this.gui.AddButton(\"w200 yp+40 x10\", \"Save && Close\").OnEvent(\"Click\", this.SaveAndClose.Bind(this))\n    this.gui.AddButton(\"w200 x+5\", \"Cancel\").OnEvent(\"Click\", this.CloseGui.Bind(this))\n\n    this.LoadClipboard()\n    this.gui.Show()\n  }\n\n  LoadClipboard() {\n    local initialText := A_Clipboard\n    this.editCtrl.Value := initialText\n    this.editCtrl.Focus()\n    SendInput(\"{End}\") ; Move caret to end to deselect text\n  }\n\n  ChangeCase(caseType, *) {\n    local currentText := this.editCtrl.Value\n    local newText := \"\"\n    try {\n      if (caseType = \"upper\") {\n        newText := StrUpper(currentText)\n      } else if (caseType = \"lower\") {\n        newText := StrLower(currentText)\n      } else if (caseType = \"title\") {\n        newText := StrTitle(currentText)\n      } else {\n        return ; Unknown case type\n      }\n      this.editCtrl.Value := newText\n    } catch as e {\n      MsgBox(\"Error changing case: \" e.Message)\n    }\n  }\n\n  SaveAndClose(*) {\n    try {\n      A_Clipboard := this.editCtrl.Value\n      this.gui.Destroy()\n    } catch as e {\n      MsgBox(\"Error saving to clipboard: \" e.Message)\n    }\n  }\n\n  CloseGui(*) {\n    this.gui.Destroy()\n  }\n}",
		"Company": "Google",
		"Errors": "None",
		"Model": "2.5 Pro Preview 3-25",
		"Notes": "Grade this an A+\nStarted with the system instructions prompt then put the claude instructions with OOP examples. ",
		"PromptBody": "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text \n- Save the newly edited version to the users clipboard",
		"PromptTitle": "Clipboard Manager",
		"Timestamp": "04/28/25"
	},
	{
		"Code": "#Requires AutoHotkey v2.1-alpha.16\n#SingleInstance Force\n\nClipboardEditor()\n\nclass ClipboardEditor {\n    __New() {\n        this.controls := Map()\n        this.gui := Gui(\"+Resize\", \"Clipboard Editor\")\n        this.gui.SetFont(\"s10\")\n        \n        this.gui.OnEvent(\"Close\", (*) => this.gui.Hide())\n        this.gui.OnEvent(\"Escape\", (*) => this.gui.Hide())\n        \n        this.controls[\"clipEdit\"] := this.gui.AddEdit(\"w400 h200 vClipText\")\n        \n        this.gui.AddText(\"xm w400 h1 0x10\")  ; Separator line\n        this.controls[\"upperBtn\"] := this.gui.AddButton(\"x10 y+10 w120\", \"UPPERCASE\").OnEvent(\"Click\", this.UpperCase.Bind(this))\n        this.controls[\"lowerBtn\"] := this.gui.AddButton(\"x+10 w120\", \"lowercase\").OnEvent(\"Click\", this.LowerCase.Bind(this))\n        this.controls[\"titleBtn\"] := this.gui.AddButton(\"x+10 w120\", \"Title Case\").OnEvent(\"Click\", this.TitleCase.Bind(this))\n        this.controls[\"saveBtn\"] := this.gui.AddButton(\"xm y+10 w400\", \"Save to Clipboard\").OnEvent(\"Click\", this.UpdateClipboard.Bind(this))\n        \n        this.ShowClipboard()\n        this.gui.Show()\n    }\n    \n    ShowClipboard() {\n        try {\n            if (A_Clipboard != \"\") {\n                this.controls[\"clipEdit\"].Value := A_Clipboard\n            }\n        } catch as err {\n            this.controls[\"clipEdit\"].Value := \"Error reading clipboard: \" err.Message\n        }\n    }\n    \n    LowerCase(*) {\n        currentText := this.controls[\"clipEdit\"].Value\n        this.controls[\"clipEdit\"].Value := Format(\"{:L}\", currentText)\n    }\n    \n    UpperCase(*) {\n        currentText := this.controls[\"clipEdit\"].Value\n        this.controls[\"clipEdit\"].Value := Format(\"{:U}\", currentText)\n    }\n    \n    TitleCase(*) {\n        currentText := this.controls[\"clipEdit\"].Value\n        this.controls[\"clipEdit\"].Value := Format(\"{:T}\", currentText)\n    }\n    \n    UpdateClipboard(*) {\n        try {\n            A_Clipboard := this.controls[\"clipEdit\"].Value\n            ToolTip(\"Clipboard updated!\")\n            SetTimer () => ToolTip(), -1000\n        } catch as err {\n            ToolTip(\"Error updating clipboard: \" err.Message)\n            SetTimer () => ToolTip(), -2000\n        }\n    }\n}",
		"Company": "Anthropic",
		"Errors": "None",
		"Model": "3.7 Sonnet",
		"Notes": "A+\n\nThis is perfectly excuted using the AHK_OOP project without thinking. The prompt did get the model to think without thinking turned on. ",
		"PromptBody": "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text \n- Save the newly edited version to the users clipboard",
		"PromptTitle": "Clipboard Manager",
		"Timestamp": "04/28/25"
	},
	{
		"Code": "ClipboardEditor()\nclass ClipboardEditor {\n    __New() {\n        this.gui := Gui(\"+Resize\", \"Clipboard Editor\")\n        this.gui.SetFont(\"s10\")\n        \n        this.editControl := this.gui.AddEdit(\"vEditContent w400 h200 Multi\", A_Clipboard)\n        \n        this.gui.AddText(\"xm w400\", \"Change Case:\")\n        this.btnUpper := this.gui.AddButton(\"xm y+5 w120 h30\", \"UPPERCASE\").OnEvent(\"Click\", this.MakeUpperCase.Bind(this))\n        this.btnLower := this.gui.AddButton(\"x+10 w120 h30\", \"lowercase\").OnEvent(\"Click\", this.MakeLowerCase.Bind(this))\n        this.btnTitle := this.gui.AddButton(\"x+10 w120 h30\", \"Title Case\").OnEvent(\"Click\", this.MakeTitleCase.Bind(this))\n        \n        this.gui.OnEvent(\"Close\", this.GuiClose.Bind(this))\n        this.gui.OnEvent(\"Escape\", this.GuiEscape.Bind(this))\n        \n        this.gui.Show()\n    }\n    \n    MakeUpperCase(*) {\n        this.editControl.Value := Format(\"{:U}\", this.editControl.Value)\n        this.SaveToClipboard()\n    }\n    \n    MakeLowerCase(*) {\n        this.editControl.Value := Format(\"{:L}\", this.editControl.Value)\n        this.SaveToClipboard()\n    }\n    \n    MakeTitleCase(*) {\n        this.editControl.Value := Format(\"{:T}\", this.editControl.Value)\n        this.SaveToClipboard()\n    }\n    \n    SaveToClipboard() {\n        A_Clipboard := this.editControl.Value\n    }\n    \n    GuiClose(*) {\n        this.gui.Hide()\n        ExitApp\n    }\n    \n    GuiEscape(*) {\n        this.gui.Hide()\n        ExitApp\n    }\n}",
		"Company": "Anthropic",
		"Errors": "",
		"Model": "3.7 Sonnet Thinking",
		"Notes": "A+\nThis used extended thinking model in the AHK_OOP project. It thought for around ",
		"PromptBody": "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text \n- Save the newly edited version to the users clipboard",
		"PromptTitle": "Clipboard Manager",
		"Timestamp": "04/28/25"
	},
	{
		"Code": "ClipboardEditor()\nclass ClipboardEditor {\n    __New() {\n        this.gui := Gui(\"+Resize\", \"Clipboard Editor\")\n        this.gui.SetFont(\"s10\")\n        \n        this.editControl := this.gui.AddEdit(\"vEditContent w400 h200 Multi\", A_Clipboard)\n        \n        this.gui.AddText(\"xm w400\", \"Change Case:\")\n        this.btnUpper := this.gui.AddButton(\"xm y+5 w120 h30\", \"UPPERCASE\").OnEvent(\"Click\", this.MakeUpperCase.Bind(this))\n        this.btnLower := this.gui.AddButton(\"x+10 w120 h30\", \"lowercase\").OnEvent(\"Click\", this.MakeLowerCase.Bind(this))\n        this.btnTitle := this.gui.AddButton(\"x+10 w120 h30\", \"Title Case\").OnEvent(\"Click\", this.MakeTitleCase.Bind(this))\n        \n        this.gui.OnEvent(\"Close\", this.GuiClose.Bind(this))\n        this.gui.OnEvent(\"Escape\", this.GuiEscape.Bind(this))\n        \n        this.gui.Show()\n    }\n    \n    MakeUpperCase(*) {\n        this.editControl.Value := Format(\"{:U}\", this.editControl.Value)\n        this.SaveToClipboard()\n    }\n    \n    MakeLowerCase(*) {\n        this.editControl.Value := Format(\"{:L}\", this.editControl.Value)\n        this.SaveToClipboard()\n    }\n    \n    MakeTitleCase(*) {\n        this.editControl.Value := Format(\"{:T}\", this.editControl.Value)\n        this.SaveToClipboard()\n    }\n    \n    SaveToClipboard() {\n        A_Clipboard := this.editControl.Value\n    }\n    \n    GuiClose(*) {\n        this.gui.Hide()\n        ExitApp\n    }\n    \n    GuiEscape(*) {\n        this.gui.Hide()\n        ExitApp\n    }\n}",
		"Company": "Anthropic",
		"Errors": "",
		"Model": "3.7 Sonnet Thinking",
		"Notes": "",
		"PromptBody": "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text \n- Save the newly edited version to the users clipboard",
		"PromptTitle": "Clipboard Manager",
		"Timestamp": "04/28/25"
	},
	{
		"Code": "#Requires AutoHotkey v2.0\n\nSetTimer UpdateCpuUsage, 1000\nUpdateCpuUsage()\n\nUpdateCpuUsage() {\n    usage := GetCPUUsage()\n    ToolTip(\"CPU Usage: \" usage \"%\")\n}\n\nGetCPUUsage() {\n    static PdhOpenQuery := DllCall(\"LoadLibrary\", \"Str\", \"pdh\", \"Ptr\")\n    static counterPath := \"\\\\\\\\Processor(_Total)\\\\\\\\% Processor Time\"\n    static query := 0, counter := 0\n    \n    if (!query) {\n        DllCall(\"pdh\\PdhOpenQuery\", \"Ptr\", 0, \"Ptr\", 0, \"Ptr*\", &query)\n        DllCall(\"pdh\\PdhAddCounter\", \"Ptr\", query, \"Str\", counterPath, \"Ptr\", 0, \"Ptr*\", &counter)\n        DllCall(\"pdh\\PdhCollectQueryData\", \"Ptr\", query)\n        Sleep 250\n    }\n    \n    DllCall(\"pdh\\PdhCollectQueryData\", \"Ptr\", query)\n    \n    value := 0, formatValue := Buffer(16, 0)\n    DllCall(\"pdh\\PdhGetFormattedCounterValue\", \"Ptr\", counter, \"UInt\", 0x00000100, \"Ptr\", 0, \"Ptr\", formatValue)\n    value := NumGet(formatValue, 8, \"Double\")\n    \n    return Round(value, 1)\n}",
		"Company": "OpenAI",
		"Errors": "Error: Parameter #3 of DllCall expects a variable reference, but received &query.",
		"Model": "GPT-3.5",
		"Notes": "The code shows a good concept but has syntax errors in the AHK v2 DllCall.",
		"PromptBody": "Create an AutoHotkey v2 script that displays current CPU usage as a tooltip that updates every second.",
		"PromptTitle": "Clipboard Editor",
		"Timestamp": "04/28/25"
	},
	{
		"Code": "#Requires AutoHotkey v2.0\n\nSetTimer UpdateCpuUsage, 1000\nUpdateCpuUsage()\n\nUpdateCpuUsage() {\n    usage := GetCPUUsage()\n    ToolTip(\"CPU Usage: \" usage \"%\")\n}\n\nGetCPUUsage() {\n    static PdhOpenQuery := DllCall(\"LoadLibrary\", \"Str\", \"pdh\", \"Ptr\")\n    static counterPath := \"\\\\\\\\Processor(_Total)\\\\\\\\% Processor Time\"\n    static query := 0, counter := 0\n    \n    if (!query) {\n        DllCall(\"pdh\\PdhOpenQuery\", \"Ptr\", 0, \"Ptr\", 0, \"Ptr*\", &query)\n        DllCall(\"pdh\\PdhAddCounter\", \"Ptr\", query, \"Str\", counterPath, \"Ptr\", 0, \"Ptr*\", &counter)\n        DllCall(\"pdh\\PdhCollectQueryData\", \"Ptr\", query)\n        Sleep 250\n    }\n    \n    DllCall(\"pdh\\PdhCollectQueryData\", \"Ptr\", query)\n    \n    value := 0, formatValue := Buffer(16, 0)\n    DllCall(\"pdh\\PdhGetFormattedCounterValue\", \"Ptr\", counter, \"UInt\", 0x00000100, \"Ptr\", 0, \"Ptr\", formatValue)\n    value := NumGet(formatValue, 8, \"Double\")\n    \n    return Round(value, 1)\n}",
		"Company": "OpenAI",
		"Errors": "Error: Parameter #3 of DllCall expects a variable reference, but received &query.",
		"Model": "GPT-3.5",
		"Notes": "The code shows a good concept but has syntax errors in the AHK v2 DllCall.",
		"PromptBody": "Create an AutoHotkey v2 script that displays current CPU usage as a tooltip that updates every second.",
		"PromptTitle": "AHK Script",
		"Timestamp": "04/28/25"
	},
	{
		"Code": "ClipboardEditor()\nclass ClipboardEditor {\n  __New() {\n    this.gui := Gui(\"+Resize\", \"Clipboard Text Editor\")\n    this.gui.SetFont(\"s10\")\n    this.gui.OnEvent(\"Close\", (*) => this.gui.Hide())\n    this.gui.OnEvent(\"Escape\", (*) => this.gui.Hide())\n    this.SetupControls()\n    this.LoadClipboardContent()\n    this.Show()\n  }\n  SetupControls() {\n    this.editControl := this.gui.AddEdit(\"w400 h200 vClipboardText\")\n    this.gui.AddButton(\"Default w100\", \"To Lower\").OnEvent(\"Click\", this.ToLower.Bind(this))\n    this.gui.AddButton(\"Default w100\", \"To Upper\").OnEvent(\"Click\", this.ToUpper.Bind(this))\n    this.gui.AddButton(\"Default w100\", \"To Title\").OnEvent(\"Click\", this.ToTitle.Bind(this))\n    this.gui.AddButton(\"Default w100\", \"Save\").OnEvent(\"Click\", this.SaveToClipboard.Bind(this))\n    this.gui.AddButton(\"Default w100\", \"Exit\").OnEvent(\"Click\", (*) => this.gui.Hide())\n  }\n  LoadClipboardContent() {\n    this.clipboardText := A_Clipboard\n    this.editControl.Text := this.clipboardText\n  }\n  ToLower(*) {\n    this.clipboardText := StrLower(this.editControl.Text)\n    this.editControl.Text := this.clipboardText\n  }\n  ToUpper(*) {\n    this.clipboardText := StrUpper(this.editControl.Text)\n    this.editControl.Text := this.clipboardText\n  }\n  ToTitle(*) {\n    this.clipboardText := StrReplace(this.editControl.Text, \" \", \" \")\n    this.clipboardText := StrLower(this.clipboardText)\n    this.clipboardText := StrUpper(SubStr(this.clipboardText, 1, 1)) . SubStr(this.clipboardText, 2)\n    this.editControl.Text := this.clipboardText\n  }\n  SaveToClipboard(*) {\n    A_Clipboard := this.editControl.Text\n  }\n  Show(*) => this.gui.Show()\n  Toggle(*) {\n    if WinExist(\"ahk_id \" this.gui.Hwnd)\n      this.gui.Hide()\n    else\n      this.gui.Show()\n  }\n  __Delete() {\n    if WinExist(\"ahk_id \" this.gui.Hwnd)\n      this.gui.Close()\n  }\n}",
		"Company": "Qwen",
		"Errors": "Qwen3-30B-A3B\n\nError Summary\n1. GUI Control Method Errors\nError : \"This value of type 'Gui' has no method named 'AddLabel'\"\nError : \"This value of type 'Gui.Edit' has no method named 'SetText'\"\nError : \"This value of type 'Gui.Text' has no method named 'SetText'\"\nError : \"This value of type 'Gui.Edit' has no method named 'GetText'\"\n2. Data Storage Errors\nError : \"Parameter #1 of Gui.Control.Prototype.Text.Set is invalid. Specifically: ClipboardAll\"\nError : \"Invalid option. Specifically: Status\"\n3. Syntax Errors\nError : \"Invalid option\" when using AddText with \"Status\" parameter\nError : \"Parameter #1 of Gui.Control.Prototype.Text.Set is invalid\" when using ClipboardAll\n4. Class and Object Errors\nError : \"This value of type 'Gui.Edit' has no method named 'SetText'\" when trying to set text in edit control\nError : \"This value of type 'Gui.Text' has no method named 'SetText'\" when trying to update status label\n5. Variable and Property Errors\nError : \"Parameter #1 of Gui.Control.Prototype.Text.Set is invalid\" when trying to set control text with ClipboardAll\nError : \"Invalid option\" when trying to create status label with \"Status\" parameter\n6. Event Handling Errors\nError : \"This value of type 'Gui.Edit' has no method named 'SetText'\" when handling button click events\nError : \"This value of type 'Gui.Text' has no method named 'SetText'\" when updating status label\nThese errors primarily stem from incorrect usage of GUI control methods and properties, as well as improper data storage techniques. The solution requires using the correct GUI control methods and proper data handling techniques as specified in the documentation.",
		"Model": "Qwen3 30B A3B",
		"Notes": "Lots of errors. No thinking used. Had to explain A_Clipboard to it and also it failed when I copy and pasted the same errors over and over again. I had to give it a custom instruction to get out of the bad solution loop. ",
		"PromptBody": "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text \n- Save the newly edited version to the users clipboard",
		"PromptTitle": "Clipboard Editor",
		"Timestamp": "2025-04-28 20:45:56"
	},
	{
		"Code": "MyEditor()\nclass MyEditor {\n    __New() {\n        this.gui := Gui(\"+Resize\", \"Clipboard Editor\")\n        this.editControl := this.gui.AddEdit(\"w500 h300 vEditText\")\n        this.btnLower := this.gui.AddButton(\"wp\", \"Lowercase\")\n        this.btnUpper := this.gui.AddButton(\"wp\", \"Uppercase\")\n        this.btnTitle := this.gui.AddButton(\"wp\", \"Title Case\")\n        this.btnSave := this.gui.AddButton(\"Default\", \"OK\")\n        \n        this.btnLower.OnEvent(\"Click\", this.LowercaseButton_Click.Bind(this))\n        this.btnUpper.OnEvent(\"Click\", this.UppercaseButton_Click.Bind(this))\n        this.btnTitle.OnEvent(\"Click\", this.TitleCaseButton_Click.Bind(this))\n        this.btnSave.OnEvent(\"Click\", this.Submit.Bind(this))\n        this.gui.OnEvent(\"Close\", (*) => this.OnGuiClose())\n        \n        this.editControl.Value := Clipboard\n        this.btnLower.Focus()\n        this.gui.Show()\n    }\n    \n    LowercaseButton_Click(*) {\n        text := this.editControl.Value\n        this.editControl.Value := StrLower(text)\n    }\n    \n    UppercaseButton_Click(*) {\n        text := this.editControl.Value\n        this.editControl.Value := StrUpper(text)\n    }\n    \n    TitleCaseButton_Click(*) {\n        text := this.editControl.Value\n        newText := \"\"\n        words := StrSplit(text, \" \", \"`n\", \"`t\")\n        for index, word in words {\n            if (word != \"\") {\n                newWord := StrUpper(SubStr(word, 1, 1)) . SubStr(word, 2)\n                newText .= newWord\n                if (index < words.Length()) \n                    newText .= \" \"\n            }\n        }\n        this.editControl.Value := newText\n    }\n    \n    Submit(*) {\n        this.SaveToClipboard()\n        this.gui.Hide()\n    }\n    \n    OnGuiClose(*) {\n        this.SaveToClipboard()\n        this.gui.Hide()\n    }\n    \n    SaveToClipboard() {\n        Clipboard := this.editControl.Value\n    }\n}",
		"Company": "Qwen",
		"Errors": "",
		"Model": "Qwen3 232B",
		"Notes": "Not complete",
		"PromptBody": "Create a clipboard text editor that:\n- Opens the GUI when the script starts\n- Shows the clipboard contents when the GUI opens in an edit box without the text selected\n- Create three buttons to change the case of the text \n- Save the newly edited version to the users clipboard",
		"PromptTitle": "Clipboard Editor",
		"Timestamp": "2025-04-28 20:46:55"
	},
	{
		"Code": "#Requires AutoHotkey v2.1-alpha.17\n#SingleInstance Force\n\nmanager := SnippetManager()\n\nclass SnippetManager {\n    static Config := Map(\n        \"Width\", 500,\n        \"Height\", 300,\n        \"ListWidth\", 480,\n        \"ListHeight\", 200,\n        \"TooltipDuration\", 1000\n    )\n    static Snippets := Map(\n        \"Greeting\", \"Hello, hope you are doing well.\",\n        \"Closing\", \"Best regards,`nYour Name\",\n        \"Reminder\", \"Just a friendly reminder regarding our upcoming meeting.\",\n        \"Follow-up\", \"Following up on our previous conversation, please advise.\"\n    )\n    __New() {\n        this.prevWin := \"\"\n        this.initGui()\n        this.setupHotkeys()\n    }\n    initGui() {\n        local listBox\n        this._gui := Gui(\"+Resize\", \"Snippet Manager\")\n        this._gui.SetFont(\"s10\")\n        this._gui.OnEvent(\"Close\", this.hideGui.Bind(this))\n        this._gui.OnEvent(\"Escape\", this.hideGui.Bind(this))\n        this._gui.OnEvent(\"Size\", this.onSize.Bind(this))\n        listBox := this._gui.AddListBox(\"vSelected x10 y10 w\" SnippetManager.Config[\"ListWidth\"] \" h\" SnippetManager.Config[\"ListHeight\"])\n        for name, _ in SnippetManager.Snippets\n            listBox.Add(name)\n        this._listBox := listBox\n        this._btnCopy := this._gui.AddButton(\"Copy\", \"x10 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n        this._btnCopy.OnEvent(\"Click\", this.copySnippet.Bind(this))\n        this._btnSend := this._gui.AddButton(\"Send\", \"x100 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n        this._btnSend.OnEvent(\"Click\", this.sendSnippet.Bind(this))\n        this._gui.Show(\"w\" SnippetManager.Config[\"Width\"] \" h\" SnippetManager.Config[\"Height\"])\n    }\n    setupHotkeys() {\n        Hotkey(\"^+s\", this.toggle.Bind(this))\n    }\n    toggle(*) {\n        if this._gui.Visible\n            this._gui.Hide()\n        else {\n            this.prevWin := WinActive(\"A\")\n            this._gui.Show()\n        }\n    }\n    hideGui(*) {\n        this._gui.Hide()\n    }\n    copySnippet(*) {\n        local guiData, key, snippetText\n        guiData := this._gui.Submit()\n        key := guiData.Selected\n        if !key {\n            this.showTooltip(\"No snippet selected\")\n            return\n        }\n        snippetText := SnippetManager.Snippets[key]\n        Clipboard := snippetText\n        this.showTooltip(\"Copied: \" key)\n    }\n    sendSnippet(*) {\n        local guiData, key, snippetText, savedClip\n        guiData := this._gui.Submit()\n        key := guiData.Selected\n        if !key {\n            this.showTooltip(\"No snippet selected\")\n            return\n        }\n        snippetText := SnippetManager.Snippets[key]\n        savedClip := ClipboardAll\n        Clipboard := snippetText\n        Sleep 50\n        WinActivate(this.prevWin)\n        Send(\"^v\")\n        Clipboard := savedClip\n        this.showTooltip(\"Sent: \" key)\n    }\n    showTooltip(msg) {\n        ToolTip(msg)\n        SetTimer(this.clearTooltip.Bind(this), -SnippetManager.Config[\"TooltipDuration\"])\n    }\n    clearTooltip(*) {\n        ToolTip()\n    }\n    onSize(*) {\n        local newW, newH\n        newW := A_EventInfo & 0xffff\n        newH := A_EventInfo >> 16\n        this._listBox.Move(\"w\" (newW - 20) \" h\" (newH - 80))\n        this._btnCopy.Move(\"y\" (newH - 50))\n        this._btnSend.Move(\"y\" (newH - 50))\n    }\n}\n",
		"Company": "OpenAI",
		"Errors": "Error: Parameter #2 of Gui.Control.Prototype.Move requires a Number, but received a String.\n\nSpecifically: y-50\n\n\t105: newH := A_EventInfo >> 16\n\t106: this._listBox.Move(\"w\" (newW - 20) \" h\" (newH - 80))\n\u25B6\t107: this._btnCopy.Move(\"y\" (newH - 50))\n\t108: this._btnSend.Move(\"y\" (newH - 50))\n\t109: }\n\nShow call stack \u00BB\n=== === Clip === ===\nError: Parameter #2 of Gui.Control.Prototype.Move requires a Number, but received a String.\n\nSpecifically: w-20 h-80\n\n\t104: newW := A_EventInfo & 0xffff\n\t105: newH := A_EventInfo >> 16\n\u25B6\t106: this._listBox.Move(\"w\" (newW - 20) \" h\" (newH - 80))\n\t107: this._btnCopy.Move(\"y\" (newH - 50))\n\t108: this._btnSend.Move(\"y\" (newH - 50))\n\nShow call stack \u00BB\n=== === Clip === ===\nError: Invalid option.\n\nSpecifically: Send\n\n\t046: this._btnCopy := this._gui.AddButton(\"Copy\", \"x10 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\t047: this._btnCopy.OnEvent(\"Click\", this.copySnippet.Bind(this))\n\u25B6\t048: this._btnSend := this._gui.AddButton(\"Send\", \"x100 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\t049: this._btnSend.OnEvent(\"Click\", this.sendSnippet.Bind(this))\n\t050: this._gui.Show(\"w\" SnippetManager.Config[\"Width\"] \" h\" SnippetManager.Config[\"Height\"])\n\nShow call stack \u00BB\n=== === Clip === ===\nError: Invalid option.\n\nSpecifically: Copy\n\n\t044: listBox.Add(name)\n\t045: this._listBox := listBox\n\u25B6\t046: this._btnCopy := this._gui.AddButton(\"Copy\", \"x10 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\t047: this._btnCopy.OnEvent(\"Click\", this.copySnippet.Bind(this))\n\t048: this._btnSend := this._gui.AddButton(\"Send\", \"x100 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\nShow call stack \u00BB\n=== === Clip === ===\nError: Parameter #1 of Gui.List.Prototype.Add requires an Array, but received a String.\n\nSpecifically: Reminder\n\n\t042: listBox := this._gui.AddListBox(\"vSelected x10 y10 w\" SnippetManager.Config[\"ListWidth\"] \" h\" SnippetManager.Config[\"ListHeight\"])\n\t043: For name, _ in SnippetManager.Snippets\n\u25B6\t044: listBox.Add(name)\n\t045: this._listBox := listBox\n\t046: this._btnCopy := this._gui.AddButton(\"Copy\", \"x10 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\nShow call stack \u00BB\n=== === Clip === ===\nError: Parameter #1 of Gui.List.Prototype.Add requires an Array, but received a String.\n\nSpecifically: Greeting\n\n\t042: listBox := this._gui.AddListBox(\"vSelected x10 y10 w\" SnippetManager.Config[\"ListWidth\"] \" h\" SnippetManager.Config[\"ListHeight\"])\n\t043: For name, _ in SnippetManager.Snippets\n\u25B6\t044: listBox.Add(name)\n\t045: this._listBox := listBox\n\t046: this._btnCopy := this._gui.AddButton(\"Copy\", \"x10 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\nShow call stack \u00BB\n=== === Clip === ===\nError: Parameter #1 of Gui.List.Prototype.Add requires an Array, but received a String.\n\nSpecifically: Follow-up\n\n\t042: listBox := this._gui.AddListBox(\"vSelected x10 y10 w\" SnippetManager.Config[\"ListWidth\"] \" h\" SnippetManager.Config[\"ListHeight\"])\n\t043: For name, _ in SnippetManager.Snippets\n\u25B6\t044: listBox.Add(name)\n\t045: this._listBox := listBox\n\t046: this._btnCopy := this._gui.AddButton(\"Copy\", \"x10 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\nShow call stack \u00BB\n=== === Clip === ===\nError: Parameter #1 of Gui.List.Prototype.Add requires an Array, but received a String.\n\nSpecifically: Closing\n\n\t042: listBox := this._gui.AddListBox(\"vSelected x10 y10 w\" SnippetManager.Config[\"ListWidth\"] \" h\" SnippetManager.Config[\"ListHeight\"])\n\t043: For name, _ in SnippetManager.Snippets\n\u25B6\t044: listBox.Add(name)\n\t045: this._listBox := listBox\n\t046: this._btnCopy := this._gui.AddButton(\"Copy\", \"x10 y\" (SnippetManager.Config[\"ListHeight\"] + 20) \" w80\")\n\nCall stack:\nC:\\Users\\USERNAME\\AppData\\Local\\Temp\\LLMLoggerRun.ahk (44) : [Gui.List.Prototype.Add] listBox.Add(name)\nC:\\Users\\USERNAME\\AppData\\Local\\Temp\\LLMLoggerRun.ahk (44) : [SnippetManager.Prototype.initGui] listBox.Add(name)\nC:\\Users\\USERNAME\\AppData\\Local\\Temp\\LLMLoggerRun.ahk (32) : [SnippetManager.Prototype.__New] this.initGui()\nC:\\Users\\USERNAME\\AppData\\Local\\Temp\\LLMLoggerRun.ahk (14) : [Object.Call] manager := SnippetManager()\nC:\\Users\\USERNAME\\AppData\\Local\\Temp\\LLMLoggerRun.ahk (14) : [] manager := SnippetManager()\n> Auto-execute",
		"Model": "o4-mini-high",
		"Notes": "Failed",
		"PromptBody": "Create an AutoHotkey v2 script for a Snippet Manager tool with the following features:\n- Store a collection of predefined text snippets (like greetings, closings, reminders)\n- Display them in a listbox GUI\n- Allow copying the selected snippet to clipboard\n- Option to send the snippet directly to the previous active window\n- Show temporary tooltips for user feedback\n\nAdditional Requirements:\n- Store snippets in a static Map\n- Track the previously active window\n- Have a clean, resizable GUI\n- Display tooltips that automatically disappear\n\nInclude these specific snippets: \"Greeting\", \"Closing\", \"Reminder\", and \"Follow-up\" with appropriate text content for each.\nMake sure to follow AutoHotkey v2 best practices with proper event binding, control management, and variable scoping.",
		"PromptTitle": "SnippetManager",
		"Timestamp": "2025-05-14 08:23:46"
	}
]